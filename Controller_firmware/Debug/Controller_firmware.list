
Controller_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd0  08004c34  08004c34  00005c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a04  08005a04  0000701c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a04  08005a04  0000701c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a04  08005a04  0000701c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a04  08005a04  00006a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a08  08005a08  00006a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08005a0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  2000001c  08005a28  0000701c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  08005a28  000077e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001163f  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ceb  00000000  00000000  0001868b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c62  00000000  00000000  0001c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021061  00000000  00000000  0001d012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dd7  00000000  00000000  0003e073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2acc  00000000  00000000  00051e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004270  00000000  00000000  0011495c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00118bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004c1c 	.word	0x08004c1c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
 80001c8:	08004c1c 	.word	0x08004c1c

080001cc <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_6


void CS_Select (void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2140      	movs	r1, #64	@ 0x40
 80001d4:	4802      	ldr	r0, [pc, #8]	@ (80001e0 <CS_Select+0x14>)
 80001d6:	f001 fc5f 	bl	8001a98 <HAL_GPIO_WritePin>
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	48000400 	.word	0x48000400

080001e4 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2140      	movs	r1, #64	@ 0x40
 80001ec:	4802      	ldr	r0, [pc, #8]	@ (80001f8 <CS_UnSelect+0x14>)
 80001ee:	f001 fc53 	bl	8001a98 <HAL_GPIO_WritePin>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	48000400 	.word	0x48000400

080001fc <CE_Enable>:


void CE_Enable (void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	2180      	movs	r1, #128	@ 0x80
 8000204:	4802      	ldr	r0, [pc, #8]	@ (8000210 <CE_Enable+0x14>)
 8000206:	f001 fc47 	bl	8001a98 <HAL_GPIO_WritePin>
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	48000800 	.word	0x48000800

08000214 <CE_Disable>:

void CE_Disable (void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2180      	movs	r1, #128	@ 0x80
 800021c:	4802      	ldr	r0, [pc, #8]	@ (8000228 <CE_Disable+0x14>)
 800021e:	f001 fc3b 	bl	8001a98 <HAL_GPIO_WritePin>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	48000800 	.word	0x48000800

0800022c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	b2db      	uxtb	r3, r3
 8000244:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800024a:	f7ff ffbf 	bl	80001cc <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800024e:	f107 010c 	add.w	r1, r7, #12
 8000252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000256:	2202      	movs	r2, #2
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <nrf24_WriteReg+0x40>)
 800025a:	f003 fcac 	bl	8003bb6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800025e:	f7ff ffc1 	bl	80001e4 <CS_UnSelect>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	2000008c 	.word	0x2000008c

08000270 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	f043 0320 	orr.w	r3, r3, #32
 8000284:	b2db      	uxtb	r3, r3
 8000286:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000288:	f7ff ffa0 	bl	80001cc <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800028c:	f107 0114 	add.w	r1, r7, #20
 8000290:	2364      	movs	r3, #100	@ 0x64
 8000292:	2201      	movs	r2, #1
 8000294:	4808      	ldr	r0, [pc, #32]	@ (80002b8 <nrf24_WriteRegMulti+0x48>)
 8000296:	f003 fc8e 	bl	8003bb6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	b29a      	uxth	r2, r3
 800029e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002a2:	68b9      	ldr	r1, [r7, #8]
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <nrf24_WriteRegMulti+0x48>)
 80002a6:	f003 fc86 	bl	8003bb6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002aa:	f7ff ff9b 	bl	80001e4 <CS_UnSelect>
}
 80002ae:	bf00      	nop
 80002b0:	3718      	adds	r7, #24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	2000008c 	.word	0x2000008c

080002bc <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002ca:	f7ff ff7f 	bl	80001cc <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80002ce:	1df9      	adds	r1, r7, #7
 80002d0:	2364      	movs	r3, #100	@ 0x64
 80002d2:	2201      	movs	r2, #1
 80002d4:	4808      	ldr	r0, [pc, #32]	@ (80002f8 <nrf24_ReadReg+0x3c>)
 80002d6:	f003 fc6e 	bl	8003bb6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80002da:	f107 010f 	add.w	r1, r7, #15
 80002de:	2364      	movs	r3, #100	@ 0x64
 80002e0:	2201      	movs	r2, #1
 80002e2:	4805      	ldr	r0, [pc, #20]	@ (80002f8 <nrf24_ReadReg+0x3c>)
 80002e4:	f003 fddd 	bl	8003ea2 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002e8:	f7ff ff7c 	bl	80001e4 <CS_UnSelect>

	return data;
 80002ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	2000008c 	.word	0x2000008c

080002fc <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000306:	f7ff ff61 	bl	80001cc <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800030a:	1df9      	adds	r1, r7, #7
 800030c:	2364      	movs	r3, #100	@ 0x64
 800030e:	2201      	movs	r2, #1
 8000310:	4804      	ldr	r0, [pc, #16]	@ (8000324 <nrfsendCmd+0x28>)
 8000312:	f003 fc50 	bl	8003bb6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000316:	f7ff ff65 	bl	80001e4 <CS_UnSelect>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	2000008c 	.word	0x2000008c

08000328 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	2b07      	cmp	r3, #7
 8000336:	d104      	bne.n	8000342 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000338:	2100      	movs	r1, #0
 800033a:	2007      	movs	r0, #7
 800033c:	f7ff ff76 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000340:	e090      	b.n	8000464 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b17      	cmp	r3, #23
 8000346:	d104      	bne.n	8000352 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000348:	2111      	movs	r1, #17
 800034a:	2017      	movs	r0, #23
 800034c:	f7ff ff6e 	bl	800022c <nrf24_WriteReg>
}
 8000350:	e088      	b.n	8000464 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000352:	2108      	movs	r1, #8
 8000354:	2000      	movs	r0, #0
 8000356:	f7ff ff69 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800035a:	213f      	movs	r1, #63	@ 0x3f
 800035c:	2001      	movs	r0, #1
 800035e:	f7ff ff65 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000362:	2103      	movs	r1, #3
 8000364:	2002      	movs	r0, #2
 8000366:	f7ff ff61 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800036a:	2103      	movs	r1, #3
 800036c:	2003      	movs	r0, #3
 800036e:	f7ff ff5d 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000372:	2103      	movs	r1, #3
 8000374:	2004      	movs	r0, #4
 8000376:	f7ff ff59 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800037a:	2102      	movs	r1, #2
 800037c:	2005      	movs	r0, #5
 800037e:	f7ff ff55 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000382:	210e      	movs	r1, #14
 8000384:	2006      	movs	r0, #6
 8000386:	f7ff ff51 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800038a:	2100      	movs	r1, #0
 800038c:	2007      	movs	r0, #7
 800038e:	f7ff ff4d 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000392:	2100      	movs	r1, #0
 8000394:	2008      	movs	r0, #8
 8000396:	f7ff ff49 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800039a:	2100      	movs	r1, #0
 800039c:	2009      	movs	r0, #9
 800039e:	f7ff ff45 	bl	800022c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80003a2:	4a32      	ldr	r2, [pc, #200]	@ (800046c <nrf24_reset+0x144>)
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ac:	6018      	str	r0, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2205      	movs	r2, #5
 80003b8:	4619      	mov	r1, r3
 80003ba:	200a      	movs	r0, #10
 80003bc:	f7ff ff58 	bl	8000270 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80003c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000470 <nrf24_reset+0x148>)
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ca:	6018      	str	r0, [r3, #0]
 80003cc:	3304      	adds	r3, #4
 80003ce:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	2205      	movs	r2, #5
 80003d6:	4619      	mov	r1, r3
 80003d8:	200b      	movs	r0, #11
 80003da:	f7ff ff49 	bl	8000270 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80003de:	21c3      	movs	r1, #195	@ 0xc3
 80003e0:	200c      	movs	r0, #12
 80003e2:	f7ff ff23 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80003e6:	21c4      	movs	r1, #196	@ 0xc4
 80003e8:	200d      	movs	r0, #13
 80003ea:	f7ff ff1f 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80003ee:	21c5      	movs	r1, #197	@ 0xc5
 80003f0:	200e      	movs	r0, #14
 80003f2:	f7ff ff1b 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80003f6:	21c6      	movs	r1, #198	@ 0xc6
 80003f8:	200f      	movs	r0, #15
 80003fa:	f7ff ff17 	bl	800022c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80003fe:	4a1b      	ldr	r2, [pc, #108]	@ (800046c <nrf24_reset+0x144>)
 8000400:	f107 0308 	add.w	r3, r7, #8
 8000404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000408:	6018      	str	r0, [r3, #0]
 800040a:	3304      	adds	r3, #4
 800040c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	2205      	movs	r2, #5
 8000414:	4619      	mov	r1, r3
 8000416:	2010      	movs	r0, #16
 8000418:	f7ff ff2a 	bl	8000270 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800041c:	2100      	movs	r1, #0
 800041e:	2011      	movs	r0, #17
 8000420:	f7ff ff04 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000424:	2100      	movs	r1, #0
 8000426:	2012      	movs	r0, #18
 8000428:	f7ff ff00 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800042c:	2100      	movs	r1, #0
 800042e:	2013      	movs	r0, #19
 8000430:	f7ff fefc 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000434:	2100      	movs	r1, #0
 8000436:	2014      	movs	r0, #20
 8000438:	f7ff fef8 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800043c:	2100      	movs	r1, #0
 800043e:	2015      	movs	r0, #21
 8000440:	f7ff fef4 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000444:	2100      	movs	r1, #0
 8000446:	2016      	movs	r0, #22
 8000448:	f7ff fef0 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800044c:	2111      	movs	r1, #17
 800044e:	2017      	movs	r0, #23
 8000450:	f7ff feec 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000454:	2100      	movs	r1, #0
 8000456:	201c      	movs	r0, #28
 8000458:	f7ff fee8 	bl	800022c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800045c:	2100      	movs	r1, #0
 800045e:	201d      	movs	r0, #29
 8000460:	f7ff fee4 	bl	800022c <nrf24_WriteReg>
}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	08004c34 	.word	0x08004c34
 8000470:	08004c3c 	.word	0x08004c3c

08000474 <NRF24_Init>:




void NRF24_Init (void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000478:	f7ff fecc 	bl	8000214 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff ff53 	bl	8000328 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000482:	2100      	movs	r1, #0
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff fed1 	bl	800022c <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800048a:	2100      	movs	r1, #0
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff fecd 	bl	800022c <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000492:	2100      	movs	r1, #0
 8000494:	2002      	movs	r0, #2
 8000496:	f7ff fec9 	bl	800022c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800049a:	2103      	movs	r1, #3
 800049c:	2003      	movs	r0, #3
 800049e:	f7ff fec5 	bl	800022c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80004a2:	2100      	movs	r1, #0
 80004a4:	2004      	movs	r0, #4
 80004a6:	f7ff fec1 	bl	800022c <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80004aa:	2100      	movs	r1, #0
 80004ac:	2005      	movs	r0, #5
 80004ae:	f7ff febd 	bl	800022c <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80004b2:	210e      	movs	r1, #14
 80004b4:	2006      	movs	r0, #6
 80004b6:	f7ff feb9 	bl	800022c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80004ba:	f7ff fe9f 	bl	80001fc <CE_Enable>

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	460b      	mov	r3, r1
 80004cc:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80004ce:	f7ff fea1 	bl	8000214 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80004d2:	78fb      	ldrb	r3, [r7, #3]
 80004d4:	4619      	mov	r1, r3
 80004d6:	2005      	movs	r0, #5
 80004d8:	f7ff fea8 	bl	800022c <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 80004dc:	2205      	movs	r2, #5
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	2010      	movs	r0, #16
 80004e2:	f7ff fec5 	bl	8000270 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff fee8 	bl	80002bc <nrf24_ReadReg>
 80004ec:	4603      	mov	r3, r0
 80004ee:	73fb      	strb	r3, [r7, #15]
//	config = config | (1<<1);   // write 1 in the PWR_UP bit
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	f023 030d 	bic.w	r3, r3, #13
 80004f6:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (CONFIG, config);
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	4619      	mov	r1, r3
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fe95 	bl	800022c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000502:	f7ff fe7b 	bl	80001fc <CE_Enable>
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 800051c:	f7ff fe56 	bl	80001cc <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 8000520:	23a0      	movs	r3, #160	@ 0xa0
 8000522:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000524:	f107 010e 	add.w	r1, r7, #14
 8000528:	2364      	movs	r3, #100	@ 0x64
 800052a:	2201      	movs	r2, #1
 800052c:	4816      	ldr	r0, [pc, #88]	@ (8000588 <NRF24_Transmit+0x78>)
 800052e:	f003 fb42 	bl	8003bb6 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 8000532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000536:	2220      	movs	r2, #32
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	4813      	ldr	r0, [pc, #76]	@ (8000588 <NRF24_Transmit+0x78>)
 800053c:	f003 fb3b 	bl	8003bb6 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 8000540:	f7ff fe50 	bl	80001e4 <CS_UnSelect>

	HAL_Delay(1);
 8000544:	2001      	movs	r0, #1
 8000546:	f000 ffc7 	bl	80014d8 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 800054a:	2017      	movs	r0, #23
 800054c:	f7ff feb6 	bl	80002bc <nrf24_ReadReg>
 8000550:	4603      	mov	r3, r0
 8000552:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	f003 0310 	and.w	r3, r3, #16
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00f      	beq.n	800057e <NRF24_Transmit+0x6e>
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d10a      	bne.n	800057e <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 8000568:	23e1      	movs	r3, #225	@ 0xe1
 800056a:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fec4 	bl	80002fc <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8000574:	2017      	movs	r0, #23
 8000576:	f7ff fed7 	bl	8000328 <nrf24_reset>

		return 1;
 800057a:	2301      	movs	r3, #1
 800057c:	e000      	b.n	8000580 <NRF24_Transmit+0x70>
	}

	return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000008c 	.word	0x2000008c

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 ff2c 	bl	80013ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f837 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f92d 	bl	80007f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800059e:	f000 f885 	bl	80006ac <MX_I2C1_Init>
  MX_SPI1_Init();
 80005a2:	f000 f8c3 	bl	800072c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80005a6:	f000 f8ff 	bl	80007a8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 80005aa:	f7ff ff63 	bl	8000474 <NRF24_Init>

  // NRF24_RxMode(RxAddress, 10);

  NRF24_TxMode(TxAddress, 10);
 80005ae:	210a      	movs	r1, #10
 80005b0:	4811      	ldr	r0, [pc, #68]	@ (80005f8 <main+0x6c>)
 80005b2:	f7ff ff86 	bl	80004c2 <NRF24_TxMode>

  // NRF24_ReadAll(data);

  SSD1306_Init();
 80005b6:	f000 fabf 	bl	8000b38 <SSD1306_Init>

  SSD1306_GotoXY (10,30);
 80005ba:	211e      	movs	r1, #30
 80005bc:	200a      	movs	r0, #10
 80005be:	f000 fc25 	bl	8000e0c <SSD1306_GotoXY>
  SSD1306_Puts ("   SUDAR", &Font_11x18, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	490d      	ldr	r1, [pc, #52]	@ (80005fc <main+0x70>)
 80005c6:	480e      	ldr	r0, [pc, #56]	@ (8000600 <main+0x74>)
 80005c8:	f000 fcb4 	bl	8000f34 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80005cc:	f000 fb78 	bl	8000cc0 <SSD1306_UpdateScreen>
  SSD1306_GotoXY (10,10);
 80005d0:	210a      	movs	r1, #10
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fc1a 	bl	8000e0c <SSD1306_GotoXY>
  SSD1306_Puts ("  TITANA", &Font_11x18, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	4908      	ldr	r1, [pc, #32]	@ (80005fc <main+0x70>)
 80005dc:	4809      	ldr	r0, [pc, #36]	@ (8000604 <main+0x78>)
 80005de:	f000 fca9 	bl	8000f34 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80005e2:	f000 fb6d 	bl	8000cc0 <SSD1306_UpdateScreen>

  HAL_Delay(1500);
 80005e6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005ea:	f000 ff75 	bl	80014d8 <HAL_Delay>

  uint8_t i = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x66>
 80005f6:	bf00      	nop
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000000 	.word	0x20000000
 8000600:	08004c50 	.word	0x08004c50
 8000604:	08004c5c 	.word	0x08004c5c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	@ 0x58
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2244      	movs	r2, #68	@ 0x44
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fad3 	bl	8004bc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800062e:	f002 f8d1 	bl	80027d4 <HAL_PWREx_ControlVoltageScaling>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000638:	f000 fa78 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800063c:	2310      	movs	r3, #16
 800063e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000648:	2360      	movs	r3, #96	@ 0x60
 800064a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000650:	2301      	movs	r3, #1
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000658:	2328      	movs	r3, #40	@ 0x28
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4618      	mov	r0, r3
 800066e:	f002 f917 	bl	80028a0 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000678:	f000 fa58 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2104      	movs	r1, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fd17 	bl	80030c8 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a0:	f000 fa44 	bl	8000b2c <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3758      	adds	r7, #88	@ 0x58
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000724 <MX_I2C1_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <MX_I2C1_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e6:	480e      	ldr	r0, [pc, #56]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006e8:	f001 f9ee 	bl	8001ac8 <HAL_I2C_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006f2:	f000 fa1b 	bl	8000b2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006fa:	f001 fe9f 	bl	800243c <HAL_I2CEx_ConfigAnalogFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 fa12 	bl	8000b2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_I2C1_Init+0x74>)
 800070c:	f001 fee1 	bl	80024d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 fa09 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000038 	.word	0x20000038
 8000724:	40005400 	.word	0x40005400
 8000728:	00f12981 	.word	0x00f12981

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_SPI1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000746:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800074a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074c:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800075a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000762:	2218      	movs	r2, #24
 8000764:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800077a:	2207      	movs	r2, #7
 800077c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_SPI1_Init+0x74>)
 8000786:	2208      	movs	r2, #8
 8000788:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_SPI1_Init+0x74>)
 800078c:	f003 f970 	bl	8003a70 <HAL_SPI_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f9c9 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	40013000 	.word	0x40013000

080007a8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_USB_PCD_Init+0x48>)
 80007ae:	4a11      	ldr	r2, [pc, #68]	@ (80007f4 <MX_USB_PCD_Init+0x4c>)
 80007b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_USB_PCD_Init+0x48>)
 80007b4:	2208      	movs	r2, #8
 80007b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <MX_USB_PCD_Init+0x48>)
 80007ba:	2202      	movs	r2, #2
 80007bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_USB_PCD_Init+0x48>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_USB_PCD_Init+0x48>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_USB_PCD_Init+0x48>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_USB_PCD_Init+0x48>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_USB_PCD_Init+0x48>)
 80007d8:	2200      	movs	r2, #0
 80007da:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_USB_PCD_Init+0x48>)
 80007de:	f001 fec4 	bl	800256a <HAL_PCD_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007e8:	f000 f9a0 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000f0 	.word	0x200000f0
 80007f4:	40006800 	.word	0x40006800

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b4a      	ldr	r3, [pc, #296]	@ (8000938 <MX_GPIO_Init+0x140>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a49      	ldr	r2, [pc, #292]	@ (8000938 <MX_GPIO_Init+0x140>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b47      	ldr	r3, [pc, #284]	@ (8000938 <MX_GPIO_Init+0x140>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b44      	ldr	r3, [pc, #272]	@ (8000938 <MX_GPIO_Init+0x140>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	4a43      	ldr	r2, [pc, #268]	@ (8000938 <MX_GPIO_Init+0x140>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000832:	4b41      	ldr	r3, [pc, #260]	@ (8000938 <MX_GPIO_Init+0x140>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, blue_Pin|green_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2103      	movs	r1, #3
 8000842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000846:	f001 f927 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	483b      	ldr	r0, [pc, #236]	@ (800093c <MX_GPIO_Init+0x144>)
 8000850:	f001 f922 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : blue_Pin green_Pin */
  GPIO_InitStruct.Pin = blue_Pin|green_Pin;
 8000854:	2303      	movs	r3, #3
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086e:	f000 ffa9 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000872:	23fc      	movs	r3, #252	@ 0xfc
 8000874:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000876:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f000 ff9b 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800088e:	2303      	movs	r3, #3
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4826      	ldr	r0, [pc, #152]	@ (800093c <MX_GPIO_Init+0x144>)
 80008a4:	f000 ff8e 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c0:	f000 ff80 	bl	80017c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c4:	2340      	movs	r3, #64	@ 0x40
 80008c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	4818      	ldr	r0, [pc, #96]	@ (800093c <MX_GPIO_Init+0x144>)
 80008dc:	f000 ff72 	bl	80017c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Enable EXTI (External Interrupt) Lines */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2102      	movs	r1, #2
 80008e4:	2008      	movs	r0, #8
 80008e6:	f000 fef6 	bl	80016d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008ea:	2008      	movs	r0, #8
 80008ec:	f000 ff0f 	bl	800170e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2102      	movs	r1, #2
 80008f4:	2009      	movs	r0, #9
 80008f6:	f000 feee 	bl	80016d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008fa:	2009      	movs	r0, #9
 80008fc:	f000 ff07 	bl	800170e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2102      	movs	r1, #2
 8000904:	200a      	movs	r0, #10
 8000906:	f000 fee6 	bl	80016d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800090a:	200a      	movs	r0, #10
 800090c:	f000 feff 	bl	800170e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	2017      	movs	r0, #23
 8000916:	f000 fede 	bl	80016d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800091a:	2017      	movs	r0, #23
 800091c:	f000 fef7 	bl	800170e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2102      	movs	r1, #2
 8000924:	2028      	movs	r0, #40	@ 0x28
 8000926:	f000 fed6 	bl	80016d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092a:	2028      	movs	r0, #40	@ 0x28
 800092c:	f000 feef 	bl	800170e <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	48000400 	.word	0x48000400

08000940 <EXTI2_IRQHandler>:

/* USER CODE BEGIN 4 */
uint8_t numberToSend = 0;

/* Button Interrupt Handlers */
void EXTI2_IRQHandler(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_2) != RESET) {
 8000944:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <EXTI2_IRQHandler+0x48>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	2b00      	cmp	r3, #0
 800094e:	d008      	beq.n	8000962 <EXTI2_IRQHandler+0x22>
        data = 1; // Data for Button 1
 8000950:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <EXTI2_IRQHandler+0x4c>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
        NRF24_Transmit(&data);
 8000956:	480d      	ldr	r0, [pc, #52]	@ (800098c <EXTI2_IRQHandler+0x4c>)
 8000958:	f7ff fdda 	bl	8000510 <NRF24_Transmit>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2); // Clear interrupt
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <EXTI2_IRQHandler+0x48>)
 800095e:	2204      	movs	r2, #4
 8000960:	615a      	str	r2, [r3, #20]
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2102      	movs	r1, #2
 8000966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096a:	f001 f895 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800096e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000972:	f000 fdb1 	bl	80014d8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2102      	movs	r1, #2
 800097a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097e:	f001 f88b 	bl	8001a98 <HAL_GPIO_WritePin>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40010400 	.word	0x40010400
 800098c:	200003d0 	.word	0x200003d0

08000990 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET) {
 8000994:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <EXTI3_IRQHandler+0x48>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	2b00      	cmp	r3, #0
 800099e:	d008      	beq.n	80009b2 <EXTI3_IRQHandler+0x22>
        data = 2; // Data for Button 2
 80009a0:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <EXTI3_IRQHandler+0x4c>)
 80009a2:	2202      	movs	r2, #2
 80009a4:	701a      	strb	r2, [r3, #0]
        NRF24_Transmit(&data);
 80009a6:	480d      	ldr	r0, [pc, #52]	@ (80009dc <EXTI3_IRQHandler+0x4c>)
 80009a8:	f7ff fdb2 	bl	8000510 <NRF24_Transmit>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <EXTI3_IRQHandler+0x48>)
 80009ae:	2208      	movs	r2, #8
 80009b0:	615a      	str	r2, [r3, #20]
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2102      	movs	r1, #2
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ba:	f001 f86d 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80009be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009c2:	f000 fd89 	bl	80014d8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ce:	f001 f863 	bl	8001a98 <HAL_GPIO_WritePin>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40010400 	.word	0x40010400
 80009dc:	200003d0 	.word	0x200003d0

080009e0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 80009e4:	4b10      	ldr	r3, [pc, #64]	@ (8000a28 <EXTI4_IRQHandler+0x48>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <EXTI4_IRQHandler+0x22>
        data = 3; // Data for Button 3
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <EXTI4_IRQHandler+0x4c>)
 80009f2:	2203      	movs	r2, #3
 80009f4:	701a      	strb	r2, [r3, #0]
        NRF24_Transmit(&data);
 80009f6:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <EXTI4_IRQHandler+0x4c>)
 80009f8:	f7ff fd8a 	bl	8000510 <NRF24_Transmit>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <EXTI4_IRQHandler+0x48>)
 80009fe:	2210      	movs	r2, #16
 8000a00:	615a      	str	r2, [r3, #20]
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2102      	movs	r1, #2
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0a:	f001 f845 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000a0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a12:	f000 fd61 	bl	80014d8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2102      	movs	r1, #2
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f001 f83b 	bl	8001a98 <HAL_GPIO_WritePin>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010400 	.word	0x40010400
 8000a2c:	200003d0 	.word	0x200003d0

08000a30 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5)) { data = 4; NRF24_Transmit(&data); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5); }
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <EXTI9_5_IRQHandler+0xa4>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	f003 0320 	and.w	r3, r3, #32
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d008      	beq.n	8000a52 <EXTI9_5_IRQHandler+0x22>
 8000a40:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <EXTI9_5_IRQHandler+0xa8>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	4824      	ldr	r0, [pc, #144]	@ (8000ad8 <EXTI9_5_IRQHandler+0xa8>)
 8000a48:	f7ff fd62 	bl	8000510 <NRF24_Transmit>
 8000a4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <EXTI9_5_IRQHandler+0xa4>)
 8000a4e:	2220      	movs	r2, #32
 8000a50:	615a      	str	r2, [r3, #20]
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6)) { data = 5; NRF24_Transmit(&data); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6); }
 8000a52:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <EXTI9_5_IRQHandler+0xa4>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d008      	beq.n	8000a70 <EXTI9_5_IRQHandler+0x40>
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <EXTI9_5_IRQHandler+0xa8>)
 8000a60:	2205      	movs	r2, #5
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	481c      	ldr	r0, [pc, #112]	@ (8000ad8 <EXTI9_5_IRQHandler+0xa8>)
 8000a66:	f7ff fd53 	bl	8000510 <NRF24_Transmit>
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <EXTI9_5_IRQHandler+0xa4>)
 8000a6c:	2240      	movs	r2, #64	@ 0x40
 8000a6e:	615a      	str	r2, [r3, #20]
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7)) { data = 6; NRF24_Transmit(&data); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7); }
 8000a70:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <EXTI9_5_IRQHandler+0xa4>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d008      	beq.n	8000a8e <EXTI9_5_IRQHandler+0x5e>
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <EXTI9_5_IRQHandler+0xa8>)
 8000a7e:	2206      	movs	r2, #6
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <EXTI9_5_IRQHandler+0xa8>)
 8000a84:	f7ff fd44 	bl	8000510 <NRF24_Transmit>
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <EXTI9_5_IRQHandler+0xa4>)
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	615a      	str	r2, [r3, #20]
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8)) { data = 7; NRF24_Transmit(&data); __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8); }
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <EXTI9_5_IRQHandler+0xa4>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d009      	beq.n	8000aae <EXTI9_5_IRQHandler+0x7e>
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <EXTI9_5_IRQHandler+0xa8>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <EXTI9_5_IRQHandler+0xa8>)
 8000aa2:	f7ff fd35 	bl	8000510 <NRF24_Transmit>
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <EXTI9_5_IRQHandler+0xa4>)
 8000aa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aac:	615a      	str	r2, [r3, #20]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f000 ffef 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000aba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000abe:	f000 fd0b 	bl	80014d8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aca:	f000 ffe5 	bl	8001a98 <HAL_GPIO_WritePin>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40010400 	.word	0x40010400
 8000ad8:	200003d0 	.word	0x200003d0

08000adc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) {
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <EXTI15_10_IRQHandler+0x48>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d009      	beq.n	8000b00 <EXTI15_10_IRQHandler+0x24>
        data = 8; // Data for Button 8
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <EXTI15_10_IRQHandler+0x4c>)
 8000aee:	2208      	movs	r2, #8
 8000af0:	701a      	strb	r2, [r3, #0]
        NRF24_Transmit(&data);
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <EXTI15_10_IRQHandler+0x4c>)
 8000af4:	f7ff fd0c 	bl	8000510 <NRF24_Transmit>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <EXTI15_10_IRQHandler+0x48>)
 8000afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afe:	615a      	str	r2, [r3, #20]
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2102      	movs	r1, #2
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b08:	f000 ffc6 	bl	8001a98 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000b0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b10:	f000 fce2 	bl	80014d8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2102      	movs	r1, #2
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1c:	f000 ffbc 	bl	8001a98 <HAL_GPIO_WritePin>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40010400 	.word	0x40010400
 8000b28:	200003d0 	.word	0x200003d0

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <Error_Handler+0x8>

08000b38 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b3e:	f000 fa1f 	bl	8000f80 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b42:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000b46:	2201      	movs	r2, #1
 8000b48:	2178      	movs	r1, #120	@ 0x78
 8000b4a:	485b      	ldr	r0, [pc, #364]	@ (8000cb8 <SSD1306_Init+0x180>)
 8000b4c:	f001 f970 	bl	8001e30 <HAL_I2C_IsDeviceReady>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e0a9      	b.n	8000cae <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000b5a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000b5e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b60:	e002      	b.n	8000b68 <SSD1306_Init+0x30>
		p--;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f9      	bne.n	8000b62 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000b6e:	22ae      	movs	r2, #174	@ 0xae
 8000b70:	2100      	movs	r1, #0
 8000b72:	2078      	movs	r0, #120	@ 0x78
 8000b74:	f000 fa80 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000b78:	2220      	movs	r2, #32
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2078      	movs	r0, #120	@ 0x78
 8000b7e:	f000 fa7b 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000b82:	2210      	movs	r2, #16
 8000b84:	2100      	movs	r1, #0
 8000b86:	2078      	movs	r0, #120	@ 0x78
 8000b88:	f000 fa76 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b8c:	22b0      	movs	r2, #176	@ 0xb0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2078      	movs	r0, #120	@ 0x78
 8000b92:	f000 fa71 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000b96:	22c8      	movs	r2, #200	@ 0xc8
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2078      	movs	r0, #120	@ 0x78
 8000b9c:	f000 fa6c 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2078      	movs	r0, #120	@ 0x78
 8000ba6:	f000 fa67 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000baa:	2210      	movs	r2, #16
 8000bac:	2100      	movs	r1, #0
 8000bae:	2078      	movs	r0, #120	@ 0x78
 8000bb0:	f000 fa62 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000bb4:	2240      	movs	r2, #64	@ 0x40
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2078      	movs	r0, #120	@ 0x78
 8000bba:	f000 fa5d 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000bbe:	2281      	movs	r2, #129	@ 0x81
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2078      	movs	r0, #120	@ 0x78
 8000bc4:	f000 fa58 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000bc8:	22ff      	movs	r2, #255	@ 0xff
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2078      	movs	r0, #120	@ 0x78
 8000bce:	f000 fa53 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000bd2:	22a1      	movs	r2, #161	@ 0xa1
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2078      	movs	r0, #120	@ 0x78
 8000bd8:	f000 fa4e 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000bdc:	22a6      	movs	r2, #166	@ 0xa6
 8000bde:	2100      	movs	r1, #0
 8000be0:	2078      	movs	r0, #120	@ 0x78
 8000be2:	f000 fa49 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000be6:	22a8      	movs	r2, #168	@ 0xa8
 8000be8:	2100      	movs	r1, #0
 8000bea:	2078      	movs	r0, #120	@ 0x78
 8000bec:	f000 fa44 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000bf0:	223f      	movs	r2, #63	@ 0x3f
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2078      	movs	r0, #120	@ 0x78
 8000bf6:	f000 fa3f 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bfa:	22a4      	movs	r2, #164	@ 0xa4
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2078      	movs	r0, #120	@ 0x78
 8000c00:	f000 fa3a 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c04:	22d3      	movs	r2, #211	@ 0xd3
 8000c06:	2100      	movs	r1, #0
 8000c08:	2078      	movs	r0, #120	@ 0x78
 8000c0a:	f000 fa35 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2078      	movs	r0, #120	@ 0x78
 8000c14:	f000 fa30 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c18:	22d5      	movs	r2, #213	@ 0xd5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2078      	movs	r0, #120	@ 0x78
 8000c1e:	f000 fa2b 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c22:	22f0      	movs	r2, #240	@ 0xf0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2078      	movs	r0, #120	@ 0x78
 8000c28:	f000 fa26 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c2c:	22d9      	movs	r2, #217	@ 0xd9
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2078      	movs	r0, #120	@ 0x78
 8000c32:	f000 fa21 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c36:	2222      	movs	r2, #34	@ 0x22
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2078      	movs	r0, #120	@ 0x78
 8000c3c:	f000 fa1c 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c40:	22da      	movs	r2, #218	@ 0xda
 8000c42:	2100      	movs	r1, #0
 8000c44:	2078      	movs	r0, #120	@ 0x78
 8000c46:	f000 fa17 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c4a:	2212      	movs	r2, #18
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2078      	movs	r0, #120	@ 0x78
 8000c50:	f000 fa12 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c54:	22db      	movs	r2, #219	@ 0xdb
 8000c56:	2100      	movs	r1, #0
 8000c58:	2078      	movs	r0, #120	@ 0x78
 8000c5a:	f000 fa0d 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c5e:	2220      	movs	r2, #32
 8000c60:	2100      	movs	r1, #0
 8000c62:	2078      	movs	r0, #120	@ 0x78
 8000c64:	f000 fa08 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000c68:	228d      	movs	r2, #141	@ 0x8d
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2078      	movs	r0, #120	@ 0x78
 8000c6e:	f000 fa03 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000c72:	2214      	movs	r2, #20
 8000c74:	2100      	movs	r1, #0
 8000c76:	2078      	movs	r0, #120	@ 0x78
 8000c78:	f000 f9fe 	bl	8001078 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000c7c:	22af      	movs	r2, #175	@ 0xaf
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2078      	movs	r0, #120	@ 0x78
 8000c82:	f000 f9f9 	bl	8001078 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c86:	222e      	movs	r2, #46	@ 0x2e
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2078      	movs	r0, #120	@ 0x78
 8000c8c:	f000 f9f4 	bl	8001078 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 f843 	bl	8000d1c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000c96:	f000 f813 	bl	8000cc0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <SSD1306_Init+0x184>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SSD1306_Init+0x184>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <SSD1306_Init+0x184>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000038 	.word	0x20000038
 8000cbc:	200007d4 	.word	0x200007d4

08000cc0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	e01d      	b.n	8000d08 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	3b50      	subs	r3, #80	@ 0x50
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2078      	movs	r0, #120	@ 0x78
 8000cd8:	f000 f9ce 	bl	8001078 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2078      	movs	r0, #120	@ 0x78
 8000ce2:	f000 f9c9 	bl	8001078 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000ce6:	2210      	movs	r2, #16
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2078      	movs	r0, #120	@ 0x78
 8000cec:	f000 f9c4 	bl	8001078 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	01db      	lsls	r3, r3, #7
 8000cf4:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <SSD1306_UpdateScreen+0x58>)
 8000cf6:	441a      	add	r2, r3
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	2140      	movs	r1, #64	@ 0x40
 8000cfc:	2078      	movs	r0, #120	@ 0x78
 8000cfe:	f000 f955 	bl	8000fac <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	3301      	adds	r3, #1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d9de      	bls.n	8000ccc <SSD1306_UpdateScreen+0xc>
	}
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200003d4 	.word	0x200003d4

08000d1c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d101      	bne.n	8000d30 <SSD1306_Fill+0x14>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e000      	b.n	8000d32 <SSD1306_Fill+0x16>
 8000d30:	23ff      	movs	r3, #255	@ 0xff
 8000d32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d36:	4619      	mov	r1, r3
 8000d38:	4803      	ldr	r0, [pc, #12]	@ (8000d48 <SSD1306_Fill+0x2c>)
 8000d3a:	f003 ff42 	bl	8004bc2 <memset>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200003d4 	.word	0x200003d4

08000d4c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
 8000d56:	460b      	mov	r3, r1
 8000d58:	80bb      	strh	r3, [r7, #4]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	70fb      	strb	r3, [r7, #3]
	if (
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d62:	d848      	bhi.n	8000df6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d68:	d845      	bhi.n	8000df6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d6a:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <SSD1306_DrawPixel+0xb8>)
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d006      	beq.n	8000d80 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bf0c      	ite	eq
 8000d78:	2301      	moveq	r3, #1
 8000d7a:	2300      	movne	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d11a      	bne.n	8000dbc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d86:	88fa      	ldrh	r2, [r7, #6]
 8000d88:	88bb      	ldrh	r3, [r7, #4]
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	4413      	add	r3, r2
 8000d94:	4a1c      	ldr	r2, [pc, #112]	@ (8000e08 <SSD1306_DrawPixel+0xbc>)
 8000d96:	5cd3      	ldrb	r3, [r2, r3]
 8000d98:	b25a      	sxtb	r2, r3
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b259      	sxtb	r1, r3
 8000dac:	88fa      	ldrh	r2, [r7, #6]
 8000dae:	4603      	mov	r3, r0
 8000db0:	01db      	lsls	r3, r3, #7
 8000db2:	4413      	add	r3, r2
 8000db4:	b2c9      	uxtb	r1, r1
 8000db6:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <SSD1306_DrawPixel+0xbc>)
 8000db8:	54d1      	strb	r1, [r2, r3]
 8000dba:	e01d      	b.n	8000df8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dbc:	88fa      	ldrh	r2, [r7, #6]
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	01db      	lsls	r3, r3, #7
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a0f      	ldr	r2, [pc, #60]	@ (8000e08 <SSD1306_DrawPixel+0xbc>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	b25a      	sxtb	r2, r3
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	4013      	ands	r3, r2
 8000de4:	b259      	sxtb	r1, r3
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	4603      	mov	r3, r0
 8000dea:	01db      	lsls	r3, r3, #7
 8000dec:	4413      	add	r3, r2
 8000dee:	b2c9      	uxtb	r1, r1
 8000df0:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <SSD1306_DrawPixel+0xbc>)
 8000df2:	54d1      	strb	r1, [r2, r3]
 8000df4:	e000      	b.n	8000df8 <SSD1306_DrawPixel+0xac>
		return;
 8000df6:	bf00      	nop
	}
}
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200007d4 	.word	0x200007d4
 8000e08:	200003d4 	.word	0x200003d4

08000e0c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	460a      	mov	r2, r1
 8000e16:	80fb      	strh	r3, [r7, #6]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e1c:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <SSD1306_GotoXY+0x28>)
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e22:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <SSD1306_GotoXY+0x28>)
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	8053      	strh	r3, [r2, #2]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	200007d4 	.word	0x200007d4

08000e38 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	4613      	mov	r3, r2
 8000e46:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e48:	4b39      	ldr	r3, [pc, #228]	@ (8000f30 <SSD1306_Putc+0xf8>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
	if (
 8000e54:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e56:	dc07      	bgt.n	8000e68 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e58:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <SSD1306_Putc+0xf8>)
 8000e5a:	885b      	ldrh	r3, [r3, #2]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	785b      	ldrb	r3, [r3, #1]
 8000e62:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e64:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e66:	dd01      	ble.n	8000e6c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e05d      	b.n	8000f28 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e04b      	b.n	8000f0a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	3b20      	subs	r3, #32
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	7849      	ldrb	r1, [r1, #1]
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4619      	mov	r1, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	440b      	add	r3, r1
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	e030      	b.n	8000ef8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d010      	beq.n	8000ec8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000ea6:	4b22      	ldr	r3, [pc, #136]	@ (8000f30 <SSD1306_Putc+0xf8>)
 8000ea8:	881a      	ldrh	r2, [r3, #0]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	4413      	add	r3, r2
 8000eb0:	b298      	uxth	r0, r3
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <SSD1306_Putc+0xf8>)
 8000eb4:	885a      	ldrh	r2, [r3, #2]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	79ba      	ldrb	r2, [r7, #6]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff ff43 	bl	8000d4c <SSD1306_DrawPixel>
 8000ec6:	e014      	b.n	8000ef2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000ec8:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <SSD1306_Putc+0xf8>)
 8000eca:	881a      	ldrh	r2, [r3, #0]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b298      	uxth	r0, r3
 8000ed4:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <SSD1306_Putc+0xf8>)
 8000ed6:	885a      	ldrh	r2, [r3, #2]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4413      	add	r3, r2
 8000ede:	b299      	uxth	r1, r3
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf0c      	ite	eq
 8000ee6:	2301      	moveq	r3, #1
 8000ee8:	2300      	movne	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	f7ff ff2d 	bl	8000d4c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d3c8      	bcc.n	8000e96 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d3ad      	bcc.n	8000e72 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <SSD1306_Putc+0xf8>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <SSD1306_Putc+0xf8>)
 8000f24:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200007d4 	.word	0x200007d4

08000f34 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f42:	e012      	b.n	8000f6a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff73 	bl	8000e38 <SSD1306_Putc>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d002      	beq.n	8000f64 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	e008      	b.n	8000f76 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1e8      	bne.n	8000f44 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	781b      	ldrb	r3, [r3, #0]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <ssd1306_I2C_Init+0x28>)
 8000f88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f8a:	e002      	b.n	8000f92 <ssd1306_I2C_Init+0x12>
		p--;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f9      	bne.n	8000f8c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	0003d090 	.word	0x0003d090

08000fac <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b0c7      	sub	sp, #284	@ 0x11c
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000fba:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000fbe:	600a      	str	r2, [r1, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fc6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000fca:	4622      	mov	r2, r4
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fd2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fe2:	460a      	mov	r2, r1
 8000fe4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000fe6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000fee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ff2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001000:	e015      	b.n	800102e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001002:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001006:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800100a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	441a      	add	r2, r3
 8001012:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001016:	3301      	adds	r3, #1
 8001018:	7811      	ldrb	r1, [r2, #0]
 800101a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800101e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001022:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001024:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001028:	3301      	adds	r3, #1
 800102a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800102e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001032:	b29b      	uxth	r3, r3
 8001034:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001038:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800103c:	8812      	ldrh	r2, [r2, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d8df      	bhi.n	8001002 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001042:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001046:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b299      	uxth	r1, r3
 800104e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001052:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	f107 020c 	add.w	r2, r7, #12
 8001060:	200a      	movs	r0, #10
 8001062:	9000      	str	r0, [sp, #0]
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <ssd1306_I2C_WriteMulti+0xc8>)
 8001066:	f000 fdcb 	bl	8001c00 <HAL_I2C_Master_Transmit>
}
 800106a:	bf00      	nop
 800106c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	20000038 	.word	0x20000038

08001078 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	460b      	mov	r3, r1
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	4613      	mov	r3, r2
 8001088:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	b299      	uxth	r1, r3
 8001096:	f107 020c 	add.w	r2, r7, #12
 800109a:	230a      	movs	r3, #10
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2302      	movs	r3, #2
 80010a0:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <ssd1306_I2C_Write+0x38>)
 80010a2:	f000 fdad 	bl	8001c00 <HAL_I2C_Master_Transmit>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000038 	.word	0x20000038

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <HAL_MspInit+0x44>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010be:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <HAL_MspInit+0x44>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <HAL_MspInit+0x44>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <HAL_MspInit+0x44>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <HAL_MspInit+0x44>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_MspInit+0x44>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09e      	sub	sp, #120	@ 0x78
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2254      	movs	r2, #84	@ 0x54
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fd50 	bl	8004bc2 <memset>
  if(hi2c->Instance==I2C1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1f      	ldr	r2, [pc, #124]	@ (80011a4 <HAL_I2C_MspInit+0xa8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d137      	bne.n	800119c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800112c:	2340      	movs	r3, #64	@ 0x40
 800112e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4618      	mov	r0, r3
 800113a:	f002 f9b1 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001144:	f7ff fcf2 	bl	8000b2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_I2C_MspInit+0xac>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <HAL_I2C_MspInit+0xac>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_I2C_MspInit+0xac>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001160:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001164:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001166:	2312      	movs	r3, #18
 8001168:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001172:	2304      	movs	r3, #4
 8001174:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f000 fb20 	bl	80017c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_I2C_MspInit+0xac>)
 8001186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001188:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_I2C_MspInit+0xac>)
 800118a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <HAL_I2C_MspInit+0xac>)
 8001192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800119c:	bf00      	nop
 800119e:	3778      	adds	r7, #120	@ 0x78
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <HAL_SPI_MspInit+0x8c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12f      	bne.n	800122e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ce:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d2:	4a1a      	ldr	r2, [pc, #104]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a14      	ldr	r2, [pc, #80]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_SPI_MspInit+0x90>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80011fe:	2338      	movs	r3, #56	@ 0x38
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800120e:	2305      	movs	r3, #5
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <HAL_SPI_MspInit+0x94>)
 800121a:	f000 fad3 	bl	80017c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2023      	movs	r0, #35	@ 0x23
 8001224:	f000 fa57 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001228:	2023      	movs	r0, #35	@ 0x23
 800122a:	f000 fa70 	bl	800170e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	@ 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40013000 	.word	0x40013000
 800123c:	40021000 	.word	0x40021000
 8001240:	48000400 	.word	0x48000400

08001244 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b09a      	sub	sp, #104	@ 0x68
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2254      	movs	r2, #84	@ 0x54
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fcb4 	bl	8004bc2 <memset>
  if(hpcd->Instance==USB)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <HAL_PCD_MspInit+0xb8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d147      	bne.n	80012f4 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001264:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001268:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800126a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800126e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001278:	2318      	movs	r3, #24
 800127a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800127c:	2307      	movs	r3, #7
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001284:	2302      	movs	r3, #2
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001288:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800128c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4618      	mov	r0, r3
 8001294:	f002 f904 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 800129e:	f7ff fc45 	bl	8000b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <HAL_PCD_MspInit+0xbc>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a6:	4a16      	ldr	r2, [pc, #88]	@ (8001300 <HAL_PCD_MspInit+0xbc>)
 80012a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ae:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <HAL_PCD_MspInit+0xbc>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_PCD_MspInit+0xbc>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d114      	bne.n	80012f0 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <HAL_PCD_MspInit+0xbc>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <HAL_PCD_MspInit+0xbc>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_PCD_MspInit+0xbc>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80012de:	f001 facf 	bl	8002880 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e2:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <HAL_PCD_MspInit+0xbc>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <HAL_PCD_MspInit+0xbc>)
 80012e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012ec:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_MspInit 1 */

  }

}
 80012ee:	e001      	b.n	80012f4 <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 80012f0:	f001 fac6 	bl	8002880 <HAL_PWREx_EnableVddUSB>
}
 80012f4:	bf00      	nop
 80012f6:	3768      	adds	r7, #104	@ 0x68
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40006800 	.word	0x40006800
 8001300:	40021000 	.word	0x40021000

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <NMI_Handler+0x4>

0800130c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <MemManage_Handler+0x4>

0800131c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <UsageFault_Handler+0x4>

0800132c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135a:	f000 f89d 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <SPI1_IRQHandler+0x10>)
 800136a:	f003 f8f1 	bl	8004550 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000008c 	.word	0x2000008c

08001378 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a0:	f7ff ffea 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	@ (80013dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <LoopForever+0xe>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	@ (80013e8 <LoopForever+0x16>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f003 fc03 	bl	8004bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ce:	f7ff f8dd 	bl	800058c <main>

080013d2 <LoopForever>:

LoopForever:
    b LoopForever
 80013d2:	e7fe      	b.n	80013d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80013e0:	08005a0c 	.word	0x08005a0c
  ldr r2, =_sbss
 80013e4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80013e8:	200007e0 	.word	0x200007e0

080013ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_IRQHandler>

080013ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f961 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	200f      	movs	r0, #15
 8001400:	f000 f80e 	bl	8001420 <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	e001      	b.n	8001414 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001410:	f7ff fe50 	bl	80010b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001414:	79fb      	ldrb	r3, [r7, #7]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800142c:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_InitTick+0x6c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d023      	beq.n	800147c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_InitTick+0x70>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_InitTick+0x6c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f96d 	bl	800172a <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10f      	bne.n	8001476 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d809      	bhi.n	8001470 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f000 f937 	bl	80016d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <HAL_InitTick+0x74>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e007      	b.n	8001480 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e004      	b.n	8001480 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e001      	b.n	8001480 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001480:	7bfb      	ldrb	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000018 	.word	0x20000018
 8001490:	20000010 	.word	0x20000010
 8001494:	20000014 	.word	0x20000014

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000018 	.word	0x20000018
 80014bc:	200007dc 	.word	0x200007dc

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200007dc 	.word	0x200007dc

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffde 	bl	80014c0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000018 	.word	0x20000018

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	@ (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	@ (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	@ (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff29 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff3e 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff8e 	bl	8001614 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff31 	bl	8001584 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa2 	bl	800167c <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d005      	beq.n	8001766 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2204      	movs	r2, #4
 800175e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e029      	b.n	80017ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 020e 	bic.w	r2, r2, #14
 8001774:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f003 021c 	and.w	r2, r3, #28
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3
    }
  }
  return status;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e148      	b.n	8001a66 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 813a 	beq.w	8001a60 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d005      	beq.n	8001804 <HAL_GPIO_Init+0x40>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d130      	bne.n	8001866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800183a:	2201      	movs	r2, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f003 0201 	and.w	r2, r3, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b03      	cmp	r3, #3
 8001870:	d017      	beq.n	80018a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	2203      	movs	r2, #3
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d123      	bne.n	80018f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0203 	and.w	r2, r3, #3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8094 	beq.w	8001a60 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	4b52      	ldr	r3, [pc, #328]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 800193a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800193c:	4a51      	ldr	r2, [pc, #324]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6613      	str	r3, [r2, #96]	@ 0x60
 8001944:	4b4f      	ldr	r3, [pc, #316]	@ (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001950:	4a4d      	ldr	r2, [pc, #308]	@ (8001a88 <HAL_GPIO_Init+0x2c4>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800197a:	d00d      	beq.n	8001998 <HAL_GPIO_Init+0x1d4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a43      	ldr	r2, [pc, #268]	@ (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x1d0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a42      	ldr	r2, [pc, #264]	@ (8001a90 <HAL_GPIO_Init+0x2cc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_GPIO_Init+0x1cc>
 800198c:	2302      	movs	r3, #2
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1d6>
 8001990:	2307      	movs	r3, #7
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1d6>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1d6>
 8001998:	2300      	movs	r3, #0
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019aa:	4937      	ldr	r1, [pc, #220]	@ (8001a88 <HAL_GPIO_Init+0x2c4>)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b8:	4b36      	ldr	r3, [pc, #216]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a06:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a30:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f47f aeaf 	bne.w	80017d4 <HAL_GPIO_Init+0x10>
  }
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	48000400 	.word	0x48000400
 8001a90:	48000800 	.word	0x48000800
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e08d      	b.n	8001bf6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fb04 	bl	80010fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2224      	movs	r2, #36	@ 0x24
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d107      	bne.n	8001b42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	e006      	b.n	8001b50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d108      	bne.n	8001b6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	e007      	b.n	8001b7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69d9      	ldr	r1, [r3, #28]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1a      	ldr	r2, [r3, #32]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	817b      	strh	r3, [r7, #10]
 8001c10:	4613      	mov	r3, r2
 8001c12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	f040 80fd 	bne.w	8001e1c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2C_Master_Transmit+0x30>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e0f6      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x21e>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c38:	f7ff fc42 	bl	80014c0 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2319      	movs	r3, #25
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fa00 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0e1      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2221      	movs	r2, #33	@ 0x21
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2210      	movs	r2, #16
 8001c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	893a      	ldrh	r2, [r7, #8]
 8001c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2bff      	cmp	r3, #255	@ 0xff
 8001c8a:	d906      	bls.n	8001c9a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	22ff      	movs	r2, #255	@ 0xff
 8001c90:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001c92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e007      	b.n	8001caa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d024      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	8979      	ldrh	r1, [r7, #10]
 8001cee:	4b4e      	ldr	r3, [pc, #312]	@ (8001e28 <HAL_I2C_Master_Transmit+0x228>)
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fb6f 	bl	80023d8 <I2C_TransferConfig>
 8001cfa:	e066      	b.n	8001dca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	8979      	ldrh	r1, [r7, #10]
 8001d04:	4b48      	ldr	r3, [pc, #288]	@ (8001e28 <HAL_I2C_Master_Transmit+0x228>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fb64 	bl	80023d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d10:	e05b      	b.n	8001dca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	6a39      	ldr	r1, [r7, #32]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f9f3 	bl	8002102 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07b      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d034      	beq.n	8001dca <HAL_I2C_Master_Transmit+0x1ca>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d130      	bne.n	8001dca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f96c 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e04d      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2bff      	cmp	r3, #255	@ 0xff
 8001d8a:	d90e      	bls.n	8001daa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	22ff      	movs	r2, #255	@ 0xff
 8001d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	8979      	ldrh	r1, [r7, #10]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 fb18 	bl	80023d8 <I2C_TransferConfig>
 8001da8:	e00f      	b.n	8001dca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	8979      	ldrh	r1, [r7, #10]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fb07 	bl	80023d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d19e      	bne.n	8001d12 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	6a39      	ldr	r1, [r7, #32]
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f9d9 	bl	8002190 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e01a      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2220      	movs	r2, #32
 8001dee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6859      	ldr	r1, [r3, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <HAL_I2C_Master_Transmit+0x22c>)
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	80002000 	.word	0x80002000
 8001e2c:	fe00e800 	.word	0xfe00e800

08001e30 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	@ 0x28
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	f040 80d6 	bne.w	8001ffe <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e60:	d101      	bne.n	8001e66 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001e62:	2302      	movs	r3, #2
 8001e64:	e0cc      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_I2C_IsDeviceReady+0x44>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e0c5      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x1d0>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2224      	movs	r2, #36	@ 0x24
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d107      	bne.n	8001ea2 <HAL_I2C_IsDeviceReady+0x72>
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ea0:	e006      	b.n	8001eb0 <HAL_I2C_IsDeviceReady+0x80>
 8001ea2:	897b      	ldrh	r3, [r7, #10]
 8001ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eac:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fb03 	bl	80014c0 <HAL_GetTick>
 8001eba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ee8:	e034      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d01a      	beq.n	8001f28 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ef2:	f7ff fae5 	bl	80014c0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d302      	bcc.n	8001f08 <HAL_I2C_IsDeviceReady+0xd8>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10f      	bne.n	8001f28 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	f043 0220 	orr.w	r2, r3, #32
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e06b      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	bf0c      	ite	eq
 8001f36:	2301      	moveq	r3, #1
 8001f38:	2300      	movne	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f54:	7ffb      	ldrb	r3, [r7, #31]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <HAL_I2C_IsDeviceReady+0x130>
 8001f5a:	7fbb      	ldrb	r3, [r7, #30]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0c4      	beq.n	8001eea <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d01a      	beq.n	8001fa4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	2120      	movs	r1, #32
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f869 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e03b      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e02d      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	2120      	movs	r1, #32
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f84e 	bl	8002050 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e020      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f63f af56 	bhi.w	8001e8a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	f043 0220 	orr.w	r2, r3, #32
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
  }
}
 8002000:	4618      	mov	r0, r3
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d103      	bne.n	8002026 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d007      	beq.n	8002044 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	619a      	str	r2, [r3, #24]
  }
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002060:	e03b      	b.n	80020da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	6839      	ldr	r1, [r7, #0]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f8d6 	bl	8002218 <I2C_IsErrorOccurred>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e041      	b.n	80020fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d02d      	beq.n	80020da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7ff fa1f 	bl	80014c0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x44>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d122      	bne.n	80020da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	4013      	ands	r3, r2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d113      	bne.n	80020da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b6:	f043 0220 	orr.w	r2, r3, #32
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4013      	ands	r3, r2
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d0b4      	beq.n	8002062 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800210e:	e033      	b.n	8002178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f87f 	bl	8002218 <I2C_IsErrorOccurred>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e031      	b.n	8002188 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212a:	d025      	beq.n	8002178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212c:	f7ff f9c8 	bl	80014c0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	d302      	bcc.n	8002142 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d11a      	bne.n	8002178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b02      	cmp	r3, #2
 800214e:	d013      	beq.n	8002178 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e007      	b.n	8002188 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d1c4      	bne.n	8002110 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800219c:	e02f      	b.n	80021fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f838 	bl	8002218 <I2C_IsErrorOccurred>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e02d      	b.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7ff f985 	bl	80014c0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d11a      	bne.n	80021fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d013      	beq.n	80021fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e007      	b.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b20      	cmp	r3, #32
 800220a:	d1c8      	bne.n	800219e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	@ 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d068      	beq.n	8002316 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2210      	movs	r2, #16
 800224a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800224c:	e049      	b.n	80022e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d045      	beq.n	80022e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002256:	f7ff f933 	bl	80014c0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	429a      	cmp	r2, r3
 8002264:	d302      	bcc.n	800226c <I2C_IsErrorOccurred+0x54>
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d13a      	bne.n	80022e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002276:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800227e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800228a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800228e:	d121      	bne.n	80022d4 <I2C_IsErrorOccurred+0xbc>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002296:	d01d      	beq.n	80022d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	2b20      	cmp	r3, #32
 800229c:	d01a      	beq.n	80022d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022ae:	f7ff f907 	bl	80014c0 <HAL_GetTick>
 80022b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022b4:	e00e      	b.n	80022d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022b6:	f7ff f903 	bl	80014c0 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b19      	cmp	r3, #25
 80022c2:	d907      	bls.n	80022d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	f043 0320 	orr.w	r3, r3, #32
 80022ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80022d2:	e006      	b.n	80022e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d1e9      	bne.n	80022b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d003      	beq.n	80022f8 <I2C_IsErrorOccurred+0xe0>
 80022f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0aa      	beq.n	800224e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2220      	movs	r2, #32
 8002306:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800235a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00b      	beq.n	8002384 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800237c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01c      	beq.n	80023c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff fe3b 	bl	8002008 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <I2C_IsErrorOccurred+0x1bc>)
 800239e:	400b      	ands	r3, r1
 80023a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80023c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	fe00e800 	.word	0xfe00e800

080023d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	817b      	strh	r3, [r7, #10]
 80023e6:	4613      	mov	r3, r2
 80023e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023ea:	897b      	ldrh	r3, [r7, #10]
 80023ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023f0:	7a7b      	ldrb	r3, [r7, #9]
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	4313      	orrs	r3, r2
 8002402:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002406:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	0d5b      	lsrs	r3, r3, #21
 8002412:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <I2C_TransferConfig+0x60>)
 8002418:	430b      	orrs	r3, r1
 800241a:	43db      	mvns	r3, r3
 800241c:	ea02 0103 	and.w	r1, r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	03ff63ff 	.word	0x03ff63ff

0800243c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b20      	cmp	r3, #32
 8002450:	d138      	bne.n	80024c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800245c:	2302      	movs	r3, #2
 800245e:	e032      	b.n	80024c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2224      	movs	r2, #36	@ 0x24
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800248e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e000      	b.n	80024c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d139      	bne.n	800255c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e033      	b.n	800255e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2224      	movs	r2, #36	@ 0x24
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002524:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0ef      	b.n	800275c <HAL_PCD_Init+0x1f2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7fe fe57 	bl	8001244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2203      	movs	r2, #3
 800259a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 faaf 	bl	8004b0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b8:	f002 fa9a 	bl	8004af0 <USB_CoreInit>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0c6      	b.n	800275c <HAL_PCD_Init+0x1f2>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fab4 	bl	8004b42 <USB_SetCurrentMode>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0b7      	b.n	800275c <HAL_PCD_Init+0x1f2>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e03e      	b.n	8002670 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	3311      	adds	r3, #17
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	3310      	adds	r3, #16
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	3313      	adds	r3, #19
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	3320      	adds	r3, #32
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	3324      	adds	r3, #36	@ 0x24
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	3301      	adds	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	791b      	ldrb	r3, [r3, #4]
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	429a      	cmp	r2, r3
 8002678:	d3bb      	bcc.n	80025f2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	e044      	b.n	800270a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	3301      	adds	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	791b      	ldrb	r3, [r3, #4]
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	429a      	cmp	r2, r3
 8002712:	d3b5      	bcc.n	8002680 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800271e:	f002 fa1d 	bl	8004b5c <USB_DevInit>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e013      	b.n	800275c <HAL_PCD_Init+0x1f2>
  }

  hpcd->USB_Address = 0U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7adb      	ldrb	r3, [r3, #11]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d102      	bne.n	8002750 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f80a 	bl	8002764 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fa1f 	bl	8004b98 <USB_DevDisconnect>

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002788:	b29b      	uxth	r3, r3
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800279c:	b29b      	uxth	r3, r3
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40007000 	.word	0x40007000

080027d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e2:	d130      	bne.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e4:	4b23      	ldr	r3, [pc, #140]	@ (8002874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f0:	d038      	beq.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f2:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2232      	movs	r2, #50	@ 0x32
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002818:	e002      	b.n	8002820 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3b01      	subs	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282c:	d102      	bne.n	8002834 <HAL_PWREx_ControlVoltageScaling+0x60>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f2      	bne.n	800281a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002840:	d110      	bne.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e00f      	b.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002846:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002852:	d007      	beq.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002854:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800285c:	4a05      	ldr	r2, [pc, #20]	@ (8002874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002862:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40007000 	.word	0x40007000
 8002878:	20000010 	.word	0x20000010
 800287c:	431bde83 	.word	0x431bde83

08002880 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a04      	ldr	r2, [pc, #16]	@ (800289c <HAL_PWREx_EnableVddUSB+0x1c>)
 800288a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800288e:	6053      	str	r3, [r2, #4]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40007000 	.word	0x40007000

080028a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f000 bc02 	b.w	80030b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b4:	4b96      	ldr	r3, [pc, #600]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028be:	4b94      	ldr	r3, [pc, #592]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80e4 	beq.w	8002a9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_RCC_OscConfig+0x4c>
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	f040 808b 	bne.w	80029fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	f040 8087 	bne.w	80029fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ec:	4b88      	ldr	r3, [pc, #544]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_OscConfig+0x64>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e3d9      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1a      	ldr	r2, [r3, #32]
 8002908:	4b81      	ldr	r3, [pc, #516]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_RCC_OscConfig+0x7e>
 8002914:	4b7e      	ldr	r3, [pc, #504]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800291c:	e005      	b.n	800292a <HAL_RCC_OscConfig+0x8a>
 800291e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800292a:	4293      	cmp	r3, r2
 800292c:	d223      	bcs.n	8002976 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fd54 	bl	80033e0 <RCC_SetFlashLatencyFromMSIRange>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e3ba      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002942:	4b73      	ldr	r3, [pc, #460]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a72      	ldr	r2, [pc, #456]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b70      	ldr	r3, [pc, #448]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	496d      	ldr	r1, [pc, #436]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002960:	4b6b      	ldr	r3, [pc, #428]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	4968      	ldr	r1, [pc, #416]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
 8002974:	e025      	b.n	80029c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002976:	4b66      	ldr	r3, [pc, #408]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a65      	ldr	r2, [pc, #404]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4960      	ldr	r1, [pc, #384]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002994:	4b5e      	ldr	r3, [pc, #376]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	495b      	ldr	r1, [pc, #364]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fd14 	bl	80033e0 <RCC_SetFlashLatencyFromMSIRange>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e37a      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029c2:	f000 fc81 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b51      	ldr	r3, [pc, #324]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	4950      	ldr	r1, [pc, #320]	@ (8002b14 <HAL_RCC_OscConfig+0x274>)
 80029d4:	5ccb      	ldrb	r3, [r1, r3]
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	fa22 f303 	lsr.w	r3, r2, r3
 80029de:	4a4e      	ldr	r2, [pc, #312]	@ (8002b18 <HAL_RCC_OscConfig+0x278>)
 80029e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029e2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b1c <HAL_RCC_OscConfig+0x27c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fd1a 	bl	8001420 <HAL_InitTick>
 80029ec:	4603      	mov	r3, r0
 80029ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d052      	beq.n	8002a9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	e35e      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d032      	beq.n	8002a68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a02:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a42      	ldr	r2, [pc, #264]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fd57 	bl	80014c0 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a16:	f7fe fd53 	bl	80014c0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e347      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a28:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a34:	4b36      	ldr	r3, [pc, #216]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a35      	ldr	r2, [pc, #212]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	f043 0308 	orr.w	r3, r3, #8
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b33      	ldr	r3, [pc, #204]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4930      	ldr	r1, [pc, #192]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a52:	4b2f      	ldr	r3, [pc, #188]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	492b      	ldr	r1, [pc, #172]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
 8002a66:	e01a      	b.n	8002a9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a68:	4b29      	ldr	r3, [pc, #164]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a28      	ldr	r2, [pc, #160]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a74:	f7fe fd24 	bl	80014c0 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fd20 	bl	80014c0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e314      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1dc>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d073      	beq.n	8002b92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_OscConfig+0x21c>
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d10b      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d063      	beq.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d15f      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e2f1      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002adc:	d106      	bne.n	8002aec <HAL_RCC_OscConfig+0x24c>
 8002ade:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e025      	b.n	8002b38 <HAL_RCC_OscConfig+0x298>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af4:	d114      	bne.n	8002b20 <HAL_RCC_OscConfig+0x280>
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a05      	ldr	r2, [pc, #20]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b03      	ldr	r3, [pc, #12]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a02      	ldr	r2, [pc, #8]	@ (8002b10 <HAL_RCC_OscConfig+0x270>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e013      	b.n	8002b38 <HAL_RCC_OscConfig+0x298>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	080059c4 	.word	0x080059c4
 8002b18:	20000010 	.word	0x20000010
 8002b1c:	20000014 	.word	0x20000014
 8002b20:	4ba0      	ldr	r3, [pc, #640]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a9f      	ldr	r2, [pc, #636]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b9d      	ldr	r3, [pc, #628]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a9c      	ldr	r2, [pc, #624]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fcbe 	bl	80014c0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe fcba 	bl	80014c0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e2ae      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b5a:	4b92      	ldr	r3, [pc, #584]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x2a8>
 8002b66:	e014      	b.n	8002b92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fcaa 	bl	80014c0 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fca6 	bl	80014c0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e29a      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b82:	4b88      	ldr	r3, [pc, #544]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x2d0>
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d060      	beq.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x310>
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d116      	bne.n	8002bde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb0:	4b7c      	ldr	r3, [pc, #496]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x328>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e277      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b76      	ldr	r3, [pc, #472]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	4973      	ldr	r1, [pc, #460]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bdc:	e040      	b.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d023      	beq.n	8002c2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be6:	4b6f      	ldr	r3, [pc, #444]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6e      	ldr	r2, [pc, #440]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fc65 	bl	80014c0 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fc61 	bl	80014c0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e255      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0c:	4b65      	ldr	r3, [pc, #404]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b62      	ldr	r3, [pc, #392]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	495f      	ldr	r1, [pc, #380]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
 8002c2c:	e018      	b.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a5c      	ldr	r2, [pc, #368]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fc41 	bl	80014c0 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c42:	f7fe fc3d 	bl	80014c0 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e231      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c54:	4b53      	ldr	r3, [pc, #332]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d03c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01c      	beq.n	8002cae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c74:	4b4b      	ldr	r3, [pc, #300]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fc1c 	bl	80014c0 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fc18 	bl	80014c0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e20c      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c9e:	4b41      	ldr	r3, [pc, #260]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ef      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3ec>
 8002cac:	e01b      	b.n	8002ce6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cae:	4b3d      	ldr	r3, [pc, #244]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb4:	4a3b      	ldr	r2, [pc, #236]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fbff 	bl	80014c0 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7fe fbfb 	bl	80014c0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e1ef      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1ef      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80a6 	beq.w	8002e40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10d      	bne.n	8002d20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d04:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	4a26      	ldr	r2, [pc, #152]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d10:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d20:	4b21      	ldr	r3, [pc, #132]	@ (8002da8 <HAL_RCC_OscConfig+0x508>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d118      	bne.n	8002d5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <HAL_RCC_OscConfig+0x508>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <HAL_RCC_OscConfig+0x508>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d38:	f7fe fbc2 	bl	80014c0 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe fbbe 	bl	80014c0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1b2      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d52:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <HAL_RCC_OscConfig+0x508>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d108      	bne.n	8002d78 <HAL_RCC_OscConfig+0x4d8>
 8002d66:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d76:	e029      	b.n	8002dcc <HAL_RCC_OscConfig+0x52c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d115      	bne.n	8002dac <HAL_RCC_OscConfig+0x50c>
 8002d80:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	4a07      	ldr	r2, [pc, #28]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d90:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d96:	4a03      	ldr	r2, [pc, #12]	@ (8002da4 <HAL_RCC_OscConfig+0x504>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da0:	e014      	b.n	8002dcc <HAL_RCC_OscConfig+0x52c>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40007000 	.word	0x40007000
 8002dac:	4b9a      	ldr	r3, [pc, #616]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db2:	4a99      	ldr	r2, [pc, #612]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dbc:	4b96      	ldr	r3, [pc, #600]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	4a95      	ldr	r2, [pc, #596]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d016      	beq.n	8002e02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fe fb74 	bl	80014c0 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ddc:	f7fe fb70 	bl	80014c0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e162      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df2:	4b89      	ldr	r3, [pc, #548]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ed      	beq.n	8002ddc <HAL_RCC_OscConfig+0x53c>
 8002e00:	e015      	b.n	8002e2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe fb5d 	bl	80014c0 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe fb59 	bl	80014c0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e14b      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e20:	4b7d      	ldr	r3, [pc, #500]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ed      	bne.n	8002e0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e2e:	7ffb      	ldrb	r3, [r7, #31]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e34:	4b78      	ldr	r3, [pc, #480]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e38:	4a77      	ldr	r2, [pc, #476]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d03c      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01c      	beq.n	8002e8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e54:	4b70      	ldr	r3, [pc, #448]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe fb2c 	bl	80014c0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e6c:	f7fe fb28 	bl	80014c0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e11c      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e7e:	4b66      	ldr	r3, [pc, #408]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ef      	beq.n	8002e6c <HAL_RCC_OscConfig+0x5cc>
 8002e8c:	e01b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e8e:	4b62      	ldr	r3, [pc, #392]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e94:	4a60      	ldr	r2, [pc, #384]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fb0f 	bl	80014c0 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ea6:	f7fe fb0b 	bl	80014c0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0ff      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002eb8:	4b57      	ldr	r3, [pc, #348]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ef      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80f3 	beq.w	80030b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	f040 80c9 	bne.w	800306c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eda:	4b4f      	ldr	r3, [pc, #316]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0203 	and.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d12c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d123      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d11b      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d113      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d109      	bne.n	8002f48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	3b01      	subs	r3, #1
 8002f42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d06b      	beq.n	8003020 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	d062      	beq.n	8003014 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f4e:	4b32      	ldr	r3, [pc, #200]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0ac      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2d      	ldr	r2, [pc, #180]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f6a:	f7fe faa9 	bl	80014c0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe faa5 	bl	80014c0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e099      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f84:	4b24      	ldr	r3, [pc, #144]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f90:	4b21      	ldr	r3, [pc, #132]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	4b21      	ldr	r3, [pc, #132]	@ (800301c <HAL_RCC_OscConfig+0x77c>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fa0:	3a01      	subs	r2, #1
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	4311      	orrs	r1, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002faa:	0212      	lsls	r2, r2, #8
 8002fac:	4311      	orrs	r1, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fb2:	0852      	lsrs	r2, r2, #1
 8002fb4:	3a01      	subs	r2, #1
 8002fb6:	0552      	lsls	r2, r2, #21
 8002fb8:	4311      	orrs	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fbe:	0852      	lsrs	r2, r2, #1
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0652      	lsls	r2, r2, #25
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fca:	06d2      	lsls	r2, r2, #27
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	4912      	ldr	r1, [pc, #72]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fd4:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8002fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fec:	f7fe fa68 	bl	80014c0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fa64 	bl	80014c0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e058      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003006:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <HAL_RCC_OscConfig+0x778>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003012:	e050      	b.n	80030b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e04f      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
 8003018:	40021000 	.word	0x40021000
 800301c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003020:	4b27      	ldr	r3, [pc, #156]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d144      	bne.n	80030b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800302c:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a23      	ldr	r2, [pc, #140]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003038:	4b21      	ldr	r3, [pc, #132]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a20      	ldr	r2, [pc, #128]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003042:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003044:	f7fe fa3c 	bl	80014c0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fa38 	bl	80014c0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e02c      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x7ac>
 800306a:	e024      	b.n	80030b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	d01f      	beq.n	80030b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a12      	ldr	r2, [pc, #72]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 8003078:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fa1f 	bl	80014c0 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe fa1b 	bl	80014c0 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e00f      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030a4:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	4905      	ldr	r1, [pc, #20]	@ (80030c0 <HAL_RCC_OscConfig+0x820>)
 80030aa:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_RCC_OscConfig+0x824>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	60cb      	str	r3, [r1, #12]
 80030b0:	e001      	b.n	80030b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	feeefffc 	.word	0xfeeefffc

080030c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0e7      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b75      	ldr	r3, [pc, #468]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b72      	ldr	r3, [pc, #456]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	4970      	ldr	r1, [pc, #448]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b6e      	ldr	r3, [pc, #440]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0cf      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b66      	ldr	r3, [pc, #408]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003124:	429a      	cmp	r2, r3
 8003126:	d908      	bls.n	800313a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003128:	4b63      	ldr	r3, [pc, #396]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4960      	ldr	r1, [pc, #384]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d04c      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	4b5a      	ldr	r3, [pc, #360]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d121      	bne.n	800319e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0a6      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003166:	4b54      	ldr	r3, [pc, #336]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d115      	bne.n	800319e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e09a      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800317e:	4b4e      	ldr	r3, [pc, #312]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e08e      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318e:	4b4a      	ldr	r3, [pc, #296]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e086      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b46      	ldr	r3, [pc, #280]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4943      	ldr	r1, [pc, #268]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b0:	f7fe f986 	bl	80014c0 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe f982 	bl	80014c0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e06e      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b3a      	ldr	r3, [pc, #232]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d010      	beq.n	800320e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	4b31      	ldr	r3, [pc, #196]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d208      	bcs.n	800320e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b2e      	ldr	r3, [pc, #184]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	492b      	ldr	r1, [pc, #172]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800320e:	4b29      	ldr	r3, [pc, #164]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d210      	bcs.n	800323e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321c:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f023 0207 	bic.w	r2, r3, #7
 8003224:	4923      	ldr	r1, [pc, #140]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322c:	4b21      	ldr	r3, [pc, #132]	@ (80032b4 <HAL_RCC_ClockConfig+0x1ec>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d001      	beq.n	800323e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e036      	b.n	80032ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324a:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4918      	ldr	r1, [pc, #96]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003268:	4b13      	ldr	r3, [pc, #76]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4910      	ldr	r1, [pc, #64]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800327c:	f000 f824 	bl	80032c8 <HAL_RCC_GetSysClockFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <HAL_RCC_ClockConfig+0x1f0>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	490b      	ldr	r1, [pc, #44]	@ (80032bc <HAL_RCC_ClockConfig+0x1f4>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
 8003298:	4a09      	ldr	r2, [pc, #36]	@ (80032c0 <HAL_RCC_ClockConfig+0x1f8>)
 800329a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800329c:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <HAL_RCC_ClockConfig+0x1fc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe f8bd 	bl	8001420 <HAL_InitTick>
 80032a6:	4603      	mov	r3, r0
 80032a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80032aa:	7afb      	ldrb	r3, [r7, #11]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40022000 	.word	0x40022000
 80032b8:	40021000 	.word	0x40021000
 80032bc:	080059c4 	.word	0x080059c4
 80032c0:	20000010 	.word	0x20000010
 80032c4:	20000014 	.word	0x20000014

080032c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d6:	4b3e      	ldr	r3, [pc, #248]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e0:	4b3b      	ldr	r3, [pc, #236]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x34>
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d121      	bne.n	800333a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d11e      	bne.n	800333a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032fc:	4b34      	ldr	r3, [pc, #208]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003308:	4b31      	ldr	r3, [pc, #196]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800330a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	e005      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003318:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003324:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b04      	cmp	r3, #4
 800333e:	d102      	bne.n	8003346 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003340:	4b25      	ldr	r3, [pc, #148]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	e004      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d101      	bne.n	8003350 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800334c:	4b23      	ldr	r3, [pc, #140]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x114>)
 800334e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d134      	bne.n	80033c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003356:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d003      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0xa6>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d003      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0xac>
 800336c:	e005      	b.n	800337a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800336e:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003370:	617b      	str	r3, [r7, #20]
      break;
 8003372:	e005      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003374:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003376:	617b      	str	r3, [r7, #20]
      break;
 8003378:	e002      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	617b      	str	r3, [r7, #20]
      break;
 800337e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003380:	4b13      	ldr	r3, [pc, #76]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	3301      	adds	r3, #1
 800338c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800338e:	4b10      	ldr	r3, [pc, #64]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	fb03 f202 	mul.w	r2, r3, r2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033a6:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	0e5b      	lsrs	r3, r3, #25
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	3301      	adds	r3, #1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033c0:	69bb      	ldr	r3, [r7, #24]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3724      	adds	r7, #36	@ 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000
 80033d4:	080059d4 	.word	0x080059d4
 80033d8:	00f42400 	.word	0x00f42400
 80033dc:	007a1200 	.word	0x007a1200

080033e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033f8:	f7ff f9de 	bl	80027b8 <HAL_PWREx_GetVoltageRange>
 80033fc:	6178      	str	r0, [r7, #20]
 80033fe:	e014      	b.n	800342a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b25      	ldr	r3, [pc, #148]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	4a24      	ldr	r2, [pc, #144]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	@ 0x58
 800340c:	4b22      	ldr	r3, [pc, #136]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003418:	f7ff f9ce 	bl	80027b8 <HAL_PWREx_GetVoltageRange>
 800341c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800341e:	4b1e      	ldr	r3, [pc, #120]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	4a1d      	ldr	r2, [pc, #116]	@ (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003428:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003430:	d10b      	bne.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b80      	cmp	r3, #128	@ 0x80
 8003436:	d919      	bls.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2ba0      	cmp	r3, #160	@ 0xa0
 800343c:	d902      	bls.n	8003444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800343e:	2302      	movs	r3, #2
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e013      	b.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003444:	2301      	movs	r3, #1
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	e010      	b.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b80      	cmp	r3, #128	@ 0x80
 800344e:	d902      	bls.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003450:	2303      	movs	r3, #3
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e00a      	b.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b80      	cmp	r3, #128	@ 0x80
 800345a:	d102      	bne.n	8003462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800345c:	2302      	movs	r3, #2
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e004      	b.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b70      	cmp	r3, #112	@ 0x70
 8003466:	d101      	bne.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003468:	2301      	movs	r3, #1
 800346a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 0207 	bic.w	r2, r3, #7
 8003474:	4909      	ldr	r1, [pc, #36]	@ (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800347c:	4b07      	ldr	r3, [pc, #28]	@ (800349c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	429a      	cmp	r2, r3
 8003488:	d001      	beq.n	800348e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	40022000 	.word	0x40022000

080034a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034a8:	2300      	movs	r3, #0
 80034aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034ac:	2300      	movs	r3, #0
 80034ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d031      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034c4:	d01a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80034c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034ca:	d814      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034d4:	d10f      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034d6:	4b5d      	ldr	r3, [pc, #372]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	4a5c      	ldr	r2, [pc, #368]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034e2:	e00c      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f9ce 	bl	800388c <RCCEx_PLLSAI1_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f4:	e003      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	74fb      	strb	r3, [r7, #19]
      break;
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80034fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10b      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003504:	4b51      	ldr	r3, [pc, #324]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003512:	494e      	ldr	r1, [pc, #312]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800351a:	e001      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 809e 	beq.w	800366a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003532:	4b46      	ldr	r3, [pc, #280]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003542:	2300      	movs	r3, #0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	4b40      	ldr	r3, [pc, #256]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354c:	4a3f      	ldr	r2, [pc, #252]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003552:	6593      	str	r3, [r2, #88]	@ 0x58
 8003554:	4b3d      	ldr	r3, [pc, #244]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003560:	2301      	movs	r3, #1
 8003562:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003564:	4b3a      	ldr	r3, [pc, #232]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a39      	ldr	r2, [pc, #228]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800356e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003570:	f7fd ffa6 	bl	80014c0 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003576:	e009      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003578:	f7fd ffa2 	bl	80014c0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d902      	bls.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	74fb      	strb	r3, [r7, #19]
        break;
 800358a:	e005      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800358c:	4b30      	ldr	r3, [pc, #192]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ef      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d15a      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800359e:	4b2b      	ldr	r3, [pc, #172]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01e      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d019      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035ba:	4b24      	ldr	r3, [pc, #144]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035c6:	4b21      	ldr	r3, [pc, #132]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035cc:	4a1f      	ldr	r2, [pc, #124]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035d6:	4b1d      	ldr	r3, [pc, #116]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	4a1b      	ldr	r2, [pc, #108]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035e6:	4a19      	ldr	r2, [pc, #100]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d016      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd ff62 	bl	80014c0 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fe:	e00b      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fd ff5e 	bl	80014c0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d902      	bls.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	74fb      	strb	r3, [r7, #19]
            break;
 8003616:	e006      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003618:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0ec      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800362c:	4b07      	ldr	r3, [pc, #28]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003632:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363a:	4904      	ldr	r1, [pc, #16]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003642:	e009      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	74bb      	strb	r3, [r7, #18]
 8003648:	e006      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003658:	7c7b      	ldrb	r3, [r7, #17]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b8a      	ldr	r3, [pc, #552]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	4a89      	ldr	r2, [pc, #548]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003668:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003676:	4b84      	ldr	r3, [pc, #528]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367c:	f023 0203 	bic.w	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	4980      	ldr	r1, [pc, #512]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003698:	4b7b      	ldr	r3, [pc, #492]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	f023 020c 	bic.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	4978      	ldr	r1, [pc, #480]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036ba:	4b73      	ldr	r3, [pc, #460]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	496f      	ldr	r1, [pc, #444]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	4967      	ldr	r1, [pc, #412]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036fe:	4b62      	ldr	r3, [pc, #392]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003704:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	495e      	ldr	r1, [pc, #376]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003720:	4b59      	ldr	r3, [pc, #356]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	4956      	ldr	r1, [pc, #344]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003742:	4b51      	ldr	r3, [pc, #324]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003748:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	494d      	ldr	r1, [pc, #308]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d028      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003764:	4b48      	ldr	r3, [pc, #288]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	4945      	ldr	r1, [pc, #276]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003782:	d106      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003784:	4b40      	ldr	r3, [pc, #256]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a3f      	ldr	r2, [pc, #252]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800378e:	60d3      	str	r3, [r2, #12]
 8003790:	e011      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800379a:	d10c      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	2101      	movs	r1, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f872 	bl	800388c <RCCEx_PLLSAI1_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d028      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037c2:	4b31      	ldr	r3, [pc, #196]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d0:	492d      	ldr	r1, [pc, #180]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e2:	4b29      	ldr	r3, [pc, #164]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4a28      	ldr	r2, [pc, #160]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ec:	60d3      	str	r3, [r2, #12]
 80037ee:	e011      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2101      	movs	r1, #1
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f843 	bl	800388c <RCCEx_PLLSAI1_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003820:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382e:	4916      	ldr	r1, [pc, #88]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800383e:	d10c      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f820 	bl	800388c <RCCEx_PLLSAI1_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003866:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003874:	4904      	ldr	r1, [pc, #16]	@ (8003888 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800387c:	7cbb      	ldrb	r3, [r7, #18]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000

0800388c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800389a:	4b74      	ldr	r3, [pc, #464]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038a6:	4b71      	ldr	r3, [pc, #452]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0203 	and.w	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d10d      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
       ||
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038be:	4b6b      	ldr	r3, [pc, #428]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
       ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d047      	beq.n	8003962 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	e044      	b.n	8003962 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d018      	beq.n	8003912 <RCCEx_PLLSAI1_Config+0x86>
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d825      	bhi.n	8003930 <RCCEx_PLLSAI1_Config+0xa4>
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d002      	beq.n	80038ee <RCCEx_PLLSAI1_Config+0x62>
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d009      	beq.n	8003900 <RCCEx_PLLSAI1_Config+0x74>
 80038ec:	e020      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ee:	4b5f      	ldr	r3, [pc, #380]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11d      	bne.n	8003936 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fe:	e01a      	b.n	8003936 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003900:	4b5a      	ldr	r3, [pc, #360]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d116      	bne.n	800393a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003910:	e013      	b.n	800393a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003912:	4b56      	ldr	r3, [pc, #344]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800391e:	4b53      	ldr	r3, [pc, #332]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800392e:	e006      	b.n	800393e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e004      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800393e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003946:	4b49      	ldr	r3, [pc, #292]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	430b      	orrs	r3, r1
 800395c:	4943      	ldr	r1, [pc, #268]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d17c      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003968:	4b40      	ldr	r3, [pc, #256]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3f      	ldr	r2, [pc, #252]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800396e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003974:	f7fd fda4 	bl	80014c0 <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800397a:	e009      	b.n	8003990 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800397c:	f7fd fda0 	bl	80014c0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	73fb      	strb	r3, [r7, #15]
        break;
 800398e:	e005      	b.n	800399c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003990:	4b36      	ldr	r3, [pc, #216]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ef      	bne.n	800397c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d15f      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d110      	bne.n	80039ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a8:	4b30      	ldr	r3, [pc, #192]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80039b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6892      	ldr	r2, [r2, #8]
 80039b8:	0211      	lsls	r1, r2, #8
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68d2      	ldr	r2, [r2, #12]
 80039be:	06d2      	lsls	r2, r2, #27
 80039c0:	430a      	orrs	r2, r1
 80039c2:	492a      	ldr	r1, [pc, #168]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	610b      	str	r3, [r1, #16]
 80039c8:	e027      	b.n	8003a1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d112      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039d0:	4b26      	ldr	r3, [pc, #152]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6892      	ldr	r2, [r2, #8]
 80039e0:	0211      	lsls	r1, r2, #8
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6912      	ldr	r2, [r2, #16]
 80039e6:	0852      	lsrs	r2, r2, #1
 80039e8:	3a01      	subs	r2, #1
 80039ea:	0552      	lsls	r2, r2, #21
 80039ec:	430a      	orrs	r2, r1
 80039ee:	491f      	ldr	r1, [pc, #124]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	610b      	str	r3, [r1, #16]
 80039f4:	e011      	b.n	8003a1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039f6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6892      	ldr	r2, [r2, #8]
 8003a06:	0211      	lsls	r1, r2, #8
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6952      	ldr	r2, [r2, #20]
 8003a0c:	0852      	lsrs	r2, r2, #1
 8003a0e:	3a01      	subs	r2, #1
 8003a10:	0652      	lsls	r2, r2, #25
 8003a12:	430a      	orrs	r2, r1
 8003a14:	4915      	ldr	r1, [pc, #84]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a1a:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fd fd4b 	bl	80014c0 <HAL_GetTick>
 8003a2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a2c:	e009      	b.n	8003a42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a2e:	f7fd fd47 	bl	80014c0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d902      	bls.n	8003a42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	73fb      	strb	r3, [r7, #15]
          break;
 8003a40:	e005      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a42:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ef      	beq.n	8003a2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a54:	4b05      	ldr	r3, [pc, #20]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	4903      	ldr	r1, [pc, #12]	@ (8003a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000

08003a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e095      	b.n	8003bae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d108      	bne.n	8003a9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a92:	d009      	beq.n	8003aa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	61da      	str	r2, [r3, #28]
 8003a9a:	e005      	b.n	8003aa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fb72 	bl	80011ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ade:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ae8:	d902      	bls.n	8003af0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e002      	b.n	8003af6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003af4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003afe:	d007      	beq.n	8003b10 <HAL_SPI_Init+0xa0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b08:	d002      	beq.n	8003b10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b52:	ea42 0103 	orr.w	r1, r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	f003 0204 	and.w	r2, r3, #4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b8c:	ea42 0103 	orr.w	r1, r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b088      	sub	sp, #32
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc6:	f7fd fc7b 	bl	80014c0 <HAL_GetTick>
 8003bca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e15c      	b.n	8003e9a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <HAL_SPI_Transmit+0x36>
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e154      	b.n	8003e9a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_SPI_Transmit+0x48>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e14d      	b.n	8003e9a <HAL_SPI_Transmit+0x2e4>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	88fa      	ldrh	r2, [r7, #6]
 8003c1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c50:	d10f      	bne.n	8003c72 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b40      	cmp	r3, #64	@ 0x40
 8003c7e:	d007      	beq.n	8003c90 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c98:	d952      	bls.n	8003d40 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_SPI_Transmit+0xf2>
 8003ca2:	8b7b      	ldrh	r3, [r7, #26]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d145      	bne.n	8003d34 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb8:	1c9a      	adds	r2, r3, #2
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ccc:	e032      	b.n	8003d34 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d112      	bne.n	8003d02 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	881a      	ldrh	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	1c9a      	adds	r2, r3, #2
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d00:	e018      	b.n	8003d34 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d02:	f7fd fbdd 	bl	80014c0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d803      	bhi.n	8003d1a <HAL_SPI_Transmit+0x164>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d102      	bne.n	8003d20 <HAL_SPI_Transmit+0x16a>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0b2      	b.n	8003e9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1c7      	bne.n	8003cce <HAL_SPI_Transmit+0x118>
 8003d3e:	e083      	b.n	8003e48 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_SPI_Transmit+0x198>
 8003d48:	8b7b      	ldrh	r3, [r7, #26]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d177      	bne.n	8003e3e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d912      	bls.n	8003d7e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	881a      	ldrh	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d68:	1c9a      	adds	r2, r3, #2
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b02      	subs	r3, #2
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d7c:	e05f      	b.n	8003e3e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003da4:	e04b      	b.n	8003e3e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d12b      	bne.n	8003e0c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d912      	bls.n	8003de4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b02      	subs	r3, #2
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003de2:	e02c      	b.n	8003e3e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	330c      	adds	r3, #12
 8003dee:	7812      	ldrb	r2, [r2, #0]
 8003df0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e0a:	e018      	b.n	8003e3e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e0c:	f7fd fb58 	bl	80014c0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d803      	bhi.n	8003e24 <HAL_SPI_Transmit+0x26e>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d102      	bne.n	8003e2a <HAL_SPI_Transmit+0x274>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e02d      	b.n	8003e9a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ae      	bne.n	8003da6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fe09 	bl	8004a64 <SPI_EndRxTxTransaction>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b088      	sub	sp, #32
 8003ea6:	af02      	add	r7, sp, #8
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e123      	b.n	800410a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eca:	d112      	bne.n	8003ef2 <HAL_SPI_Receive+0x50>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10e      	bne.n	8003ef2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2204      	movs	r2, #4
 8003ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003edc:	88fa      	ldrh	r2, [r7, #6]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f912 	bl	8004112 <HAL_SPI_TransmitReceive>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	e10b      	b.n	800410a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef2:	f7fd fae5 	bl	80014c0 <HAL_GetTick>
 8003ef6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_SPI_Receive+0x62>
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e100      	b.n	800410a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_SPI_Receive+0x74>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e0f9      	b.n	800410a <HAL_SPI_Receive+0x268>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2204      	movs	r2, #4
 8003f22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	88fa      	ldrh	r2, [r7, #6]
 8003f36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f68:	d908      	bls.n	8003f7c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	e007      	b.n	8003f8c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f94:	d10f      	bne.n	8003fb6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b40      	cmp	r3, #64	@ 0x40
 8003fc2:	d007      	beq.n	8003fd4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fdc:	d875      	bhi.n	80040ca <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003fde:	e037      	b.n	8004050 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d117      	bne.n	800401e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f103 020c 	add.w	r2, r3, #12
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	7812      	ldrb	r2, [r2, #0]
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800401c:	e018      	b.n	8004050 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800401e:	f7fd fa4f 	bl	80014c0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d803      	bhi.n	8004036 <HAL_SPI_Receive+0x194>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d102      	bne.n	800403c <HAL_SPI_Receive+0x19a>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e05c      	b.n	800410a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1c1      	bne.n	8003fe0 <HAL_SPI_Receive+0x13e>
 800405c:	e03b      	b.n	80040d6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d115      	bne.n	8004098 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	b292      	uxth	r2, r2
 8004078:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004096:	e018      	b.n	80040ca <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004098:	f7fd fa12 	bl	80014c0 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d803      	bhi.n	80040b0 <HAL_SPI_Receive+0x20e>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d102      	bne.n	80040b6 <HAL_SPI_Receive+0x214>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e01f      	b.n	800410a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1c3      	bne.n	800405e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fc6a 	bl	80049b4 <SPI_EndRxTransaction>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004108:	2300      	movs	r3, #0
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b08a      	sub	sp, #40	@ 0x28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004120:	2301      	movs	r3, #1
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004124:	f7fd f9cc 	bl	80014c0 <HAL_GetTick>
 8004128:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004130:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004138:	887b      	ldrh	r3, [r7, #2]
 800413a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d00c      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x4e>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800414c:	d106      	bne.n	800415c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d102      	bne.n	800415c <HAL_SPI_TransmitReceive+0x4a>
 8004156:	7ffb      	ldrb	r3, [r7, #31]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d001      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
 800415e:	e1f3      	b.n	8004548 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_SPI_TransmitReceive+0x60>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_SPI_TransmitReceive+0x60>
 800416c:	887b      	ldrh	r3, [r7, #2]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e1e8      	b.n	8004548 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x72>
 8004180:	2302      	movs	r3, #2
 8004182:	e1e1      	b.n	8004548 <HAL_SPI_TransmitReceive+0x436>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b04      	cmp	r3, #4
 8004196:	d003      	beq.n	80041a0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2205      	movs	r2, #5
 800419c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	887a      	ldrh	r2, [r7, #2]
 80041c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041e2:	d802      	bhi.n	80041ea <HAL_SPI_TransmitReceive+0xd8>
 80041e4:	8abb      	ldrh	r3, [r7, #20]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d908      	bls.n	80041fc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	e007      	b.n	800420c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b40      	cmp	r3, #64	@ 0x40
 8004218:	d007      	beq.n	800422a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004228:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004232:	f240 8083 	bls.w	800433c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_SPI_TransmitReceive+0x132>
 800423e:	8afb      	ldrh	r3, [r7, #22]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d16f      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004254:	1c9a      	adds	r2, r3, #2
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004268:	e05c      	b.n	8004324 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d11b      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x19e>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d016      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x19e>
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	2b01      	cmp	r3, #1
 8004286:	d113      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	881a      	ldrh	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	1c9a      	adds	r2, r3, #2
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d11c      	bne.n	80042f8 <HAL_SPI_TransmitReceive+0x1e6>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d016      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	b292      	uxth	r2, r2
 80042d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	1c9a      	adds	r2, r3, #2
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042f4:	2301      	movs	r3, #1
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042f8:	f7fd f8e2 	bl	80014c0 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004304:	429a      	cmp	r2, r3
 8004306:	d80d      	bhi.n	8004324 <HAL_SPI_TransmitReceive+0x212>
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d009      	beq.n	8004324 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e111      	b.n	8004548 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d19d      	bne.n	800426a <HAL_SPI_TransmitReceive+0x158>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d197      	bne.n	800426a <HAL_SPI_TransmitReceive+0x158>
 800433a:	e0e5      	b.n	8004508 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_SPI_TransmitReceive+0x23a>
 8004344:	8afb      	ldrh	r3, [r7, #22]
 8004346:	2b01      	cmp	r3, #1
 8004348:	f040 80d1 	bne.w	80044ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d912      	bls.n	800437c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004366:	1c9a      	adds	r2, r3, #2
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b02      	subs	r3, #2
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800437a:	e0b8      	b.n	80044ee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a2:	e0a4      	b.n	80044ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d134      	bne.n	800441c <HAL_SPI_TransmitReceive+0x30a>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02f      	beq.n	800441c <HAL_SPI_TransmitReceive+0x30a>
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d12c      	bne.n	800441c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d912      	bls.n	80043f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d0:	881a      	ldrh	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	1c9a      	adds	r2, r3, #2
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b02      	subs	r3, #2
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043f0:	e012      	b.n	8004418 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d148      	bne.n	80044bc <HAL_SPI_TransmitReceive+0x3aa>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d042      	beq.n	80044bc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d923      	bls.n	800448a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	b292      	uxth	r2, r2
 800444e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b02      	subs	r3, #2
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	d81f      	bhi.n	80044b8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	e016      	b.n	80044b8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f103 020c 	add.w	r2, r3, #12
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044b8:	2301      	movs	r3, #1
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044bc:	f7fd f800 	bl	80014c0 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d803      	bhi.n	80044d4 <HAL_SPI_TransmitReceive+0x3c2>
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d102      	bne.n	80044da <HAL_SPI_TransmitReceive+0x3c8>
 80044d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e02c      	b.n	8004548 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f47f af55 	bne.w	80043a4 <HAL_SPI_TransmitReceive+0x292>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	f47f af4e 	bne.w	80043a4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004508:	6a3a      	ldr	r2, [r7, #32]
 800450a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 faa9 	bl	8004a64 <SPI_EndRxTxTransaction>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e00e      	b.n	8004548 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004546:	2300      	movs	r3, #0
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	3728      	adds	r7, #40	@ 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10e      	bne.n	8004590 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
    return;
 800458e:	e0ce      	b.n	800472e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_SPI_IRQHandler+0x5e>
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4798      	blx	r3
    return;
 80045ac:	e0bf      	b.n	800472e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <HAL_SPI_IRQHandler+0x7e>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d105      	bne.n	80045ce <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80b0 	beq.w	800472e <HAL_SPI_IRQHandler+0x1de>
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80aa 	beq.w	800472e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d023      	beq.n	800462c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d011      	beq.n	8004614 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	e00b      	b.n	800462c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	693b      	ldr	r3, [r7, #16]
        return;
 800462a:	e080      	b.n	800472e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d014      	beq.n	8004660 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800466e:	f043 0208 	orr.w	r2, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004688:	2b00      	cmp	r3, #0
 800468a:	d04f      	beq.n	800472c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800469a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <HAL_SPI_IRQHandler+0x168>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d034      	beq.n	8004722 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0203 	bic.w	r2, r2, #3
 80046c6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d011      	beq.n	80046f4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	4a17      	ldr	r2, [pc, #92]	@ (8004734 <HAL_SPI_IRQHandler+0x1e4>)
 80046d6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fd f830 	bl	8001742 <HAL_DMA_Abort_IT>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d016      	beq.n	800472a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004700:	4a0c      	ldr	r2, [pc, #48]	@ (8004734 <HAL_SPI_IRQHandler+0x1e4>)
 8004702:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd f81a 	bl	8001742 <HAL_DMA_Abort_IT>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004718:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004720:	e003      	b.n	800472a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f808 	bl	8004738 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004728:	e000      	b.n	800472c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800472a:	bf00      	nop
    return;
 800472c:	bf00      	nop
  }
}
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	0800474d 	.word	0x0800474d

08004738 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff ffe5 	bl	8004738 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004788:	f7fc fe9a 	bl	80014c0 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4413      	add	r3, r2
 8004796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004798:	f7fc fe92 	bl	80014c0 <HAL_GetTick>
 800479c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800479e:	4b39      	ldr	r3, [pc, #228]	@ (8004884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	015b      	lsls	r3, r3, #5
 80047a4:	0d1b      	lsrs	r3, r3, #20
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ae:	e054      	b.n	800485a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d050      	beq.n	800485a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b8:	f7fc fe82 	bl	80014c0 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d902      	bls.n	80047ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d13d      	bne.n	800484a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047e6:	d111      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0x94>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f0:	d004      	beq.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fa:	d107      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800480a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004814:	d10f      	bne.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e017      	b.n	800487a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3b01      	subs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	429a      	cmp	r2, r3
 8004876:	d19b      	bne.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000010 	.word	0x20000010

08004888 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	@ 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800489a:	f7fc fe11 	bl	80014c0 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	4413      	add	r3, r2
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80048aa:	f7fc fe09 	bl	80014c0 <HAL_GetTick>
 80048ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048b8:	4b3d      	ldr	r3, [pc, #244]	@ (80049b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	00da      	lsls	r2, r3, #3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	0d1b      	lsrs	r3, r3, #20
 80048c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048d0:	e060      	b.n	8004994 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048d8:	d107      	bne.n	80048ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d050      	beq.n	8004994 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048f2:	f7fc fde5 	bl	80014c0 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fe:	429a      	cmp	r2, r3
 8004900:	d902      	bls.n	8004908 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	2b00      	cmp	r3, #0
 8004906:	d13d      	bne.n	8004984 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004916:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004920:	d111      	bne.n	8004946 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800492a:	d004      	beq.n	8004936 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004934:	d107      	bne.n	8004946 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004944:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494e:	d10f      	bne.n	8004970 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800496e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e010      	b.n	80049a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	3b01      	subs	r3, #1
 8004992:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4013      	ands	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d196      	bne.n	80048d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3728      	adds	r7, #40	@ 0x28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000010 	.word	0x20000010

080049b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049c8:	d111      	bne.n	80049ee <SPI_EndRxTransaction+0x3a>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d2:	d004      	beq.n	80049de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049dc:	d107      	bne.n	80049ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2180      	movs	r1, #128	@ 0x80
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff febd 	bl	8004778 <SPI_WaitFlagStateUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e023      	b.n	8004a5c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1c:	d11d      	bne.n	8004a5a <SPI_EndRxTransaction+0xa6>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a26:	d004      	beq.n	8004a32 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a30:	d113      	bne.n	8004a5a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7ff ff22 	bl	8004888 <SPI_WaitFifoStateUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d007      	beq.n	8004a5a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e000      	b.n	8004a5c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff ff03 	bl	8004888 <SPI_WaitFifoStateUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e027      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2180      	movs	r1, #128	@ 0x80
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fe68 	bl	8004778 <SPI_WaitFlagStateUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e014      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff fedc 	bl	8004888 <SPI_WaitFifoStateUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ada:	f043 0220 	orr.w	r2, r3, #32
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e000      	b.n	8004ae8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	4638      	mov	r0, r7
 8004afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b14:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8004b18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	4638      	mov	r0, r7
 8004b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <memset>:
 8004bc2:	4402      	add	r2, r0
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d100      	bne.n	8004bcc <memset+0xa>
 8004bca:	4770      	bx	lr
 8004bcc:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd0:	e7f9      	b.n	8004bc6 <memset+0x4>
	...

08004bd4 <__libc_init_array>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004c0c <__libc_init_array+0x38>)
 8004bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004c10 <__libc_init_array+0x3c>)
 8004bda:	1b64      	subs	r4, r4, r5
 8004bdc:	10a4      	asrs	r4, r4, #2
 8004bde:	2600      	movs	r6, #0
 8004be0:	42a6      	cmp	r6, r4
 8004be2:	d109      	bne.n	8004bf8 <__libc_init_array+0x24>
 8004be4:	4d0b      	ldr	r5, [pc, #44]	@ (8004c14 <__libc_init_array+0x40>)
 8004be6:	4c0c      	ldr	r4, [pc, #48]	@ (8004c18 <__libc_init_array+0x44>)
 8004be8:	f000 f818 	bl	8004c1c <_init>
 8004bec:	1b64      	subs	r4, r4, r5
 8004bee:	10a4      	asrs	r4, r4, #2
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	42a6      	cmp	r6, r4
 8004bf4:	d105      	bne.n	8004c02 <__libc_init_array+0x2e>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfc:	4798      	blx	r3
 8004bfe:	3601      	adds	r6, #1
 8004c00:	e7ee      	b.n	8004be0 <__libc_init_array+0xc>
 8004c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c06:	4798      	blx	r3
 8004c08:	3601      	adds	r6, #1
 8004c0a:	e7f2      	b.n	8004bf2 <__libc_init_array+0x1e>
 8004c0c:	08005a04 	.word	0x08005a04
 8004c10:	08005a04 	.word	0x08005a04
 8004c14:	08005a04 	.word	0x08005a04
 8004c18:	08005a08 	.word	0x08005a08

08004c1c <_init>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	bf00      	nop
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr

08004c28 <_fini>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	bf00      	nop
 8004c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2e:	bc08      	pop	{r3}
 8004c30:	469e      	mov	lr, r3
 8004c32:	4770      	bx	lr
